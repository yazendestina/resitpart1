
eeeee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080076b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cb8  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001db4  20001db4  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f916  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bcb  00000000  00000000  0002fa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  00032610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af0  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024202  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001048b  00000000  00000000  00057f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0993  00000000  00000000  000683c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138d58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030f0  00000000  00000000  00138da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007638 	.word	0x08007638

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007638 	.word	0x08007638

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa2e 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8da 	bl	8000690 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f006 fb72 	bl	8006bc4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004e0:	f000 f884 	bl	80005ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x40>)
 80004e6:	f000 fafd 	bl	8000ae4 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD,OutputPin_Pin);
 80004ea:	2101      	movs	r1, #1
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <main+0x44>)
 80004ee:	f001 f8c8 	bl	8001682 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80004f2:	20fa      	movs	r0, #250	; 0xfa
 80004f4:	f000 fa8e 	bl	8000a14 <HAL_Delay>
	  readvalue = HAL_GPIO_ReadPin(GPIOB,InputPin_Pin);
 80004f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x48>)
 80004fe:	f001 f88f 	bl	8001620 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x4c>)
 8000508:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOD,OutputPin_Pin);
 800050a:	e7ee      	b.n	80004ea <main+0x1e>
 800050c:	20000118 	.word	0x20000118
 8000510:	40020c00 	.word	0x40020c00
 8000514:	40020400 	.word	0x40020400
 8000518:	200001a0 	.word	0x200001a0

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 f87c 	bl	8007628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <SystemClock_Config+0xc8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <SystemClock_Config+0xcc>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000590:	2348      	movs	r3, #72	; 0x48
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000598:	2303      	movs	r3, #3
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fb05 	bl	8002bb0 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f8de 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fd67 	bl	80030a0 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d8:	f000 f8c8 	bl	800076c <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x98>)
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000646:	2201      	movs	r2, #1
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_ADC1_Init+0x98>)
 800064c:	f000 fa06 	bl	8000a5c <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 f889 	bl	800076c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800065a:	2301      	movs	r3, #1
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x98>)
 800066c:	f000 fb0c 	bl	8000c88 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000676:	f000 f879 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000118 	.word	0x20000118
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a25      	ldr	r2, [pc, #148]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1e      	ldr	r2, [pc, #120]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OutputPin_GPIO_Port, OutputPin_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2101      	movs	r1, #1
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <MX_GPIO_Init+0xd4>)
 800071c:	f000 ff98 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputPin_Pin */
  GPIO_InitStruct.Pin = InputPin_Pin;
 8000720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072a:	2301      	movs	r3, #1
 800072c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(InputPin_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_GPIO_Init+0xd8>)
 8000736:	f000 fdd7 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OutputPin_Pin */
  GPIO_InitStruct.Pin = OutputPin_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OutputPin_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0xd4>)
 8000752:	f000 fdc9 	bl	80012e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40020400 	.word	0x40020400

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_MspInit+0x4c>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6453      	str	r3, [r2, #68]	; 0x44
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_ADC_MspInit+0x7c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d127      	bne.n	800083a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_ADC_MspInit+0x80>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <HAL_ADC_MspInit+0x80>)
 80007f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_ADC_MspInit+0x80>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_ADC_MspInit+0x80>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_ADC_MspInit+0x80>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_ADC_MspInit+0x80>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_ADC_MspInit+0x84>)
 8000836:	f000 fd57 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40012000 	.word	0x40012000
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f89a 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <OTG_FS_IRQHandler+0x10>)
 80008aa:	f001 f854 	bl	8001956 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20001688 	.word	0x20001688

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f006 fe5b 	bl	80075c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fddd 	bl	80004cc <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000920:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8000924:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000928:	20001db4 	.word	0x20001db4

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 fc83 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff ff08 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fc9b 	bl	80012ce <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 fc63 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200001a4 	.word	0x200001a4

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200001a4 	.word	0x200001a4

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e033      	b.n	8000ada <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fea4 	bl	80007c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d118      	bne.n	8000acc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000aa2:	f023 0302 	bic.w	r3, r3, #2
 8000aa6:	f043 0202 	orr.w	r2, r3, #2
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 fa0c 	bl	8000ecc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f023 0303 	bic.w	r3, r3, #3
 8000ac2:	f043 0201 	orr.w	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aca:	e001      	b.n	8000ad0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <HAL_ADC_Start+0x1a>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e0b2      	b.n	8000c64 <HAL_ADC_Start+0x180>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d018      	beq.n	8000b46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 0201 	orr.w	r2, r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b24:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <HAL_ADC_Start+0x18c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a52      	ldr	r2, [pc, #328]	; (8000c74 <HAL_ADC_Start+0x190>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9a      	lsrs	r2, r3, #18
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000b38:	e002      	b.n	8000b40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f9      	bne.n	8000b3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d17a      	bne.n	8000c4a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b92:	d106      	bne.n	8000ba2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	f023 0206 	bic.w	r2, r3, #6
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
 8000ba0:	e002      	b.n	8000ba8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_ADC_Start+0x194>)
 8000bb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000bbc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d12a      	bne.n	8000c20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <HAL_ADC_Start+0x198>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d015      	beq.n	8000c00 <HAL_ADC_Start+0x11c>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <HAL_ADC_Start+0x19c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d105      	bne.n	8000bea <HAL_ADC_Start+0x106>
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_ADC_Start+0x194>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00a      	beq.n	8000c00 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <HAL_ADC_Start+0x1a0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d136      	bne.n	8000c62 <HAL_ADC_Start+0x17e>
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_ADC_Start+0x194>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d130      	bne.n	8000c62 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d129      	bne.n	8000c62 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	e020      	b.n	8000c62 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <HAL_ADC_Start+0x198>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11b      	bne.n	8000c62 <HAL_ADC_Start+0x17e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d114      	bne.n	8000c62 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	e00b      	b.n	8000c62 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f043 0210 	orr.w	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20000000 	.word	0x20000000
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	40012300 	.word	0x40012300
 8000c7c:	40012000 	.word	0x40012000
 8000c80:	40012100 	.word	0x40012100
 8000c84:	40012200 	.word	0x40012200

08000c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1c>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e105      	b.n	8000eb0 <HAL_ADC_ConfigChannel+0x228>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b09      	cmp	r3, #9
 8000cb2:	d925      	bls.n	8000d00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68d9      	ldr	r1, [r3, #12]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3b1e      	subs	r3, #30
 8000cca:	2207      	movs	r2, #7
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43da      	mvns	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68d9      	ldr	r1, [r3, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	4603      	mov	r3, r0
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4403      	add	r3, r0
 8000cf2:	3b1e      	subs	r3, #30
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	e022      	b.n	8000d46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6919      	ldr	r1, [r3, #16]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	2207      	movs	r2, #7
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	400a      	ands	r2, r1
 8000d22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6919      	ldr	r1, [r3, #16]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	4603      	mov	r3, r0
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4403      	add	r3, r0
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d824      	bhi.n	8000d98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3b05      	subs	r3, #5
 8000d60:	221f      	movs	r2, #31
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	3b05      	subs	r3, #5
 8000d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
 8000d96:	e04c      	b.n	8000e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b0c      	cmp	r3, #12
 8000d9e:	d824      	bhi.n	8000dea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b23      	subs	r3, #35	; 0x23
 8000db2:	221f      	movs	r2, #31
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43da      	mvns	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b23      	subs	r3, #35	; 0x23
 8000ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	631a      	str	r2, [r3, #48]	; 0x30
 8000de8:	e023      	b.n	8000e32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b41      	subs	r3, #65	; 0x41
 8000dfc:	221f      	movs	r2, #31
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	400a      	ands	r2, r1
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b41      	subs	r3, #65	; 0x41
 8000e26:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_ADC_ConfigChannel+0x234>)
 8000e34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <HAL_ADC_ConfigChannel+0x238>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d109      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1cc>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b12      	cmp	r3, #18
 8000e46:	d105      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_ADC_ConfigChannel+0x238>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x21e>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b10      	cmp	r3, #16
 8000e64:	d003      	beq.n	8000e6e <HAL_ADC_ConfigChannel+0x1e6>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b11      	cmp	r3, #17
 8000e6c:	d11b      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b10      	cmp	r3, #16
 8000e80:	d111      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_ADC_ConfigChannel+0x23c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_ADC_ConfigChannel+0x240>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	0c9a      	lsrs	r2, r3, #18
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000e98:	e002      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f9      	bne.n	8000e9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40012300 	.word	0x40012300
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	431bde83 	.word	0x431bde83

08000ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ed4:	4b79      	ldr	r3, [pc, #484]	; (80010bc <ADC_Init+0x1f0>)
 8000ed6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6859      	ldr	r1, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	021a      	lsls	r2, r3, #8
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6859      	ldr	r1, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6899      	ldr	r1, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <ADC_Init+0x1f4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d022      	beq.n	8000faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6899      	ldr	r1, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6899      	ldr	r1, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	e00f      	b.n	8000fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0202 	bic.w	r2, r2, #2
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6899      	ldr	r1, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
 8000fe4:	005a      	lsls	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01b      	beq.n	8001030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6859      	ldr	r1, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	3b01      	subs	r3, #1
 8001024:	035a      	lsls	r2, r3, #13
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	e007      	b.n	8001040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800103e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	3b01      	subs	r3, #1
 800105c:	051a      	lsls	r2, r3, #20
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6899      	ldr	r1, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001082:	025a      	lsls	r2, r3, #9
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800109a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6899      	ldr	r1, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	029a      	lsls	r2, r3, #10
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	609a      	str	r2, [r3, #8]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40012300 	.word	0x40012300
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff3e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e16b      	b.n	80015dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 815a 	bne.w	80015d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80b4 	beq.w	80015d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a5f      	ldr	r2, [pc, #380]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <HAL_GPIO_Init+0x310>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_GPIO_Init+0x314>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x226>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a51      	ldr	r2, [pc, #324]	; (8001600 <HAL_GPIO_Init+0x318>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x222>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_GPIO_Init+0x31c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x21e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_GPIO_Init+0x320>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_GPIO_Init+0x324>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <HAL_GPIO_Init+0x328>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x32c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	; (8001618 <HAL_GPIO_Init+0x330>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x20a>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150e:	2300      	movs	r3, #0
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <HAL_GPIO_Init+0x310>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <HAL_GPIO_Init+0x334>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_GPIO_Init+0x334>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_GPIO_Init+0x334>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_GPIO_Init+0x334>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_GPIO_Init+0x334>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_GPIO_Init+0x334>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae90 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001694:	887a      	ldrh	r2, [r7, #2]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43d9      	mvns	r1, r3
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	400b      	ands	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b8:	b08f      	sub	sp, #60	; 0x3c
 80016ba:	af0a      	add	r7, sp, #40	; 0x28
 80016bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e10f      	b.n	80018e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 fc5a 	bl	8006f9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2203      	movs	r2, #3
 80016ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f001 ffd7 	bl	80036ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	687e      	ldr	r6, [r7, #4]
 8001714:	466d      	mov	r5, sp
 8001716:	f106 0410 	add.w	r4, r6, #16
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001726:	e885 0003 	stmia.w	r5, {r0, r1}
 800172a:	1d33      	adds	r3, r6, #4
 800172c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f001 feae 	bl	8003490 <USB_CoreInit>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0d0      	b.n	80018e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f001 ffc5 	bl	80036dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e04a      	b.n	80017ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	333d      	adds	r3, #61	; 0x3d
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	333c      	adds	r3, #60	; 0x3c
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	b298      	uxth	r0, r3
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3344      	adds	r3, #68	; 0x44
 8001794:	4602      	mov	r2, r0
 8001796:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3340      	adds	r3, #64	; 0x40
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	3348      	adds	r3, #72	; 0x48
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	334c      	adds	r3, #76	; 0x4c
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3354      	adds	r3, #84	; 0x54
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	3301      	adds	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3af      	bcc.n	8001758 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e044      	b.n	8001888 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	3301      	adds	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	d3b5      	bcc.n	80017fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	687e      	ldr	r6, [r7, #4]
 800189a:	466d      	mov	r5, sp
 800189c:	f106 0410 	add.w	r4, r6, #16
 80018a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f001 ff5d 	bl	8003774 <USB_DevInit>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00d      	b.n	80018e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 f8ac 	bl	8004a3e <USB_DevDisconnect>

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_PCD_Start+0x1c>
 8001908:	2302      	movs	r3, #2
 800190a:	e020      	b.n	800194e <HAL_PCD_Start+0x5e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	2b01      	cmp	r3, #1
 800191a:	d109      	bne.n	8001930 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f001 feaf 	bl	8003698 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 f85c 	bl	80049fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b08d      	sub	sp, #52	; 0x34
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 f91a 	bl	8004ba6 <USB_GetMode>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 848a 	bne.w	800228e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f87e 	bl	8004a80 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8480 	beq.w	800228c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f86b 	bl	8004a80 <USB_ReadInterrupts>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d107      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f002 0202 	and.w	r2, r2, #2
 80019c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f859 	bl	8004a80 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d161      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0210 	bic.w	r2, r2, #16
 80019e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 020f 	and.w	r2, r3, #15
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	3304      	adds	r3, #4
 8001a06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	0c5b      	lsrs	r3, r3, #17
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d124      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d035      	beq.n	8001a8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a38      	ldr	r0, [r7, #32]
 8001a34:	f002 fe90 	bl	8004758 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a44:	441a      	add	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a56:	441a      	add	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	621a      	str	r2, [r3, #32]
 8001a5c:	e016      	b.n	8001a8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	0c5b      	lsrs	r3, r3, #17
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d110      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a70:	2208      	movs	r2, #8
 8001a72:	4619      	mov	r1, r3
 8001a74:	6a38      	ldr	r0, [r7, #32]
 8001a76:	f002 fe6f 	bl	8004758 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a86:	441a      	add	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0210 	orr.w	r2, r2, #16
 8001a9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 ffed 	bl	8004a80 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ab0:	f040 80a7 	bne.w	8001c02 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fff2 	bl	8004aa6 <USB_ReadDevAllOutEpInterrupt>
 8001ac2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ac4:	e099      	b.n	8001bfa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 808e 	beq.w	8001bee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 f816 	bl	8004b0e <USB_ReadDevOutEPInterrupt>
 8001ae2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afa:	461a      	mov	r2, r3
 8001afc:	2301      	movs	r3, #1
 8001afe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fec2 	bl	800288c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2308      	movs	r3, #8
 8001b22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 ff98 	bl	8002a5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b42:	461a      	mov	r2, r3
 8001b44:	2310      	movs	r3, #16
 8001b46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d030      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b80      	cmp	r3, #128	; 0x80
 8001b5c:	d109      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	78db      	ldrb	r3, [r3, #3]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2200      	movs	r2, #0
 8001b94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f005 fb03 	bl	80071a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2320      	movs	r3, #32
 8001bce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be6:	461a      	mov	r2, r3
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f af62 	bne.w	8001ac6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 ff3a 	bl	8004a80 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c16:	f040 80db 	bne.w	8001dd0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 ff5b 	bl	8004ada <USB_ReadDevAllInEpInterrupt>
 8001c24:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c2a:	e0cd      	b.n	8001dc8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80c2 	beq.w	8001dbc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 ff81 	bl	8004b4a <USB_ReadDevInEPInterrupt>
 8001c48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d057      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c74:	4013      	ands	r3, r2
 8001c76:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c84:	461a      	mov	r2, r3
 8001c86:	2301      	movs	r3, #1
 8001c88:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d132      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	334c      	adds	r3, #76	; 0x4c
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4403      	add	r3, r0
 8001cb2:	3348      	adds	r3, #72	; 0x48
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4419      	add	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4403      	add	r3, r0
 8001cc6:	334c      	adds	r3, #76	; 0x4c
 8001cc8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d113      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x3a2>
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3354      	adds	r3, #84	; 0x54
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	f002 ff88 	bl	8004c08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 f9cd 	bl	800709e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d36:	461a      	mov	r2, r3
 8001d38:	2310      	movs	r3, #16
 8001d3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d52:	461a      	mov	r2, r3
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d023      	beq.n	8001daa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d64:	6a38      	ldr	r0, [r7, #32]
 8001d66:	f001 fe69 	bl	8003a3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3338      	adds	r3, #56	; 0x38
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	78db      	ldrb	r3, [r3, #3]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f005 fa1a 	bl	80071cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da4:	461a      	mov	r2, r3
 8001da6:	2302      	movs	r3, #2
 8001da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fcdb 	bl	8002772 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f47f af2e 	bne.w	8001c2c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fe53 	bl	8004a80 <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001de4:	d122      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d108      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fec2 	bl	8002b98 <HAL_PCDEx_LPM_Callback>
 8001e14:	e002      	b.n	8001e1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f005 f9b8 	bl	800718c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 fe25 	bl	8004a80 <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e40:	d112      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d102      	bne.n	8001e58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f005 f974 	bl	8007140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e66:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 fe07 	bl	8004a80 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7c:	f040 80b7 	bne.w	8001fee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2110      	movs	r1, #16
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fdce 	bl	8003a3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea4:	e046      	b.n	8001f34 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001eb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eca:	0151      	lsls	r1, r2, #5
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	440a      	add	r2, r1
 8001ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ed4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ed8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001eec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	0151      	lsls	r1, r2, #5
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	440a      	add	r2, r1
 8001f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	3301      	adds	r3, #1
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3b3      	bcc.n	8001ea6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6a:	f043 030b 	orr.w	r3, r3, #11
 8001f6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f80:	f043 030b 	orr.w	r3, r3, #11
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	e015      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fae:	f043 030b 	orr.w	r3, r3, #11
 8001fb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f002 fe15 	bl	8004c08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fd44 	bl	8004a80 <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002002:	d124      	bne.n	800204e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fdda 	bl	8004bc2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fd8f 	bl	8003b36 <USB_GetDevSpeed>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681c      	ldr	r4, [r3, #0]
 8002024:	f001 fa28 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8002028:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4620      	mov	r0, r4
 8002034:	f001 fa8e 	bl	8003554 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f005 f858 	bl	80070ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800204c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fd14 	bl	8004a80 <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d10a      	bne.n	8002078 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f005 f835 	bl	80070d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f002 0208 	and.w	r2, r2, #8
 8002076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f002 fcff 	bl	8004a80 <USB_ReadInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	2b80      	cmp	r3, #128	; 0x80
 800208a:	d122      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002098:	2301      	movs	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	e014      	b.n	80020c8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fb27 	bl	8002710 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3e5      	bcc.n	800209e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fcd2 	bl	8004a80 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e6:	d13b      	bne.n	8002160 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e8:	2301      	movs	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
 80020ec:	e02b      	b.n	8002146 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3340      	adds	r3, #64	; 0x40
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d115      	bne.n	8002140 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002114:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002116:	2b00      	cmp	r3, #0
 8002118:	da12      	bge.n	8002140 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	333f      	adds	r3, #63	; 0x3f
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fae8 	bl	8002710 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	3301      	adds	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	429a      	cmp	r2, r3
 800214e:	d3ce      	bcc.n	80020ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800215e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fc8b 	bl	8004a80 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002174:	d155      	bne.n	8002222 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	e045      	b.n	8002208 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d12e      	bne.n	8002202 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da2b      	bge.n	8002202 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80021b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d121      	bne.n	8002202 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fe:	6053      	str	r3, [r2, #4]
            break;
 8002200:	e007      	b.n	8002212 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	3301      	adds	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220e:	429a      	cmp	r2, r3
 8002210:	d3b4      	bcc.n	800217c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fc2a 	bl	8004a80 <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d10a      	bne.n	800224e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 ffd9 	bl	80071f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800224c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f002 fc14 	bl	8004a80 <USB_ReadInterrupts>
 8002258:	4603      	mov	r3, r0
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d115      	bne.n	800228e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f004 ffc9 	bl	800720c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	e000      	b.n	800228e <HAL_PCD_IRQHandler+0x938>
      return;
 800228c:	bf00      	nop
    }
  }
}
 800228e:	3734      	adds	r7, #52	; 0x34
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_SetAddress+0x1a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e013      	b.n	80022d6 <HAL_PCD_SetAddress+0x42>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fb72 	bl	80049b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	4608      	mov	r0, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	70fb      	strb	r3, [r7, #3]
 80022f0:	460b      	mov	r3, r1
 80022f2:	803b      	strh	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da0f      	bge.n	8002324 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	3338      	adds	r3, #56	; 0x38
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00f      	b.n	8002344 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002350:	883a      	ldrh	r2, [r7, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	78ba      	ldrb	r2, [r7, #2]
 800235a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800236e:	78bb      	ldrb	r3, [r7, #2]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d102      	bne.n	800237a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_PCD_EP_Open+0xaa>
 8002384:	2302      	movs	r3, #2
 8002386:	e00e      	b.n	80023a6 <HAL_PCD_EP_Open+0xc8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fbf2 	bl	8003b80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80023a4:	7afb      	ldrb	r3, [r7, #11]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da0f      	bge.n	80023e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 020f 	and.w	r2, r3, #15
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3338      	adds	r3, #56	; 0x38
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	705a      	strb	r2, [r3, #1]
 80023e0:	e00f      	b.n	8002402 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 020f 	and.w	r2, r3, #15
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	3304      	adds	r3, #4
 80023fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_PCD_EP_Close+0x6e>
 8002418:	2302      	movs	r3, #2
 800241a:	e00e      	b.n	800243a <HAL_PCD_EP_Close+0x8c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68f9      	ldr	r1, [r7, #12]
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fc30 	bl	8003c90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	460b      	mov	r3, r1
 8002450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	b2da      	uxtb	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	f001 ff0f 	bl	80042d8 <USB_EP0StartXfer>
 80024ba:	e008      	b.n	80024ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	6979      	ldr	r1, [r7, #20]
 80024ca:	f001 fcbd 	bl	8003e48 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	460b      	mov	r3, r1
 8002516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002518:	7afb      	ldrb	r3, [r7, #11]
 800251a:	f003 020f 	and.w	r2, r3, #15
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	3338      	adds	r3, #56	; 0x38
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2201      	movs	r2, #1
 8002546:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	b2da      	uxtb	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	6979      	ldr	r1, [r7, #20]
 800257a:	f001 fead 	bl	80042d8 <USB_EP0StartXfer>
 800257e:	e008      	b.n	8002592 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	f001 fc5b 	bl	8003e48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d901      	bls.n	80025ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e050      	b.n	800265c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da0f      	bge.n	80025e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 020f 	and.w	r2, r3, #15
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3338      	adds	r3, #56	; 0x38
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	705a      	strb	r2, [r3, #1]
 80025e0:	e00d      	b.n	80025fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_PCD_EP_SetStall+0x82>
 800261a:	2302      	movs	r3, #2
 800261c:	e01e      	b.n	800265c <HAL_PCD_EP_SetStall+0xc0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f002 f8eb 	bl	8004808 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b2d9      	uxtb	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800264c:	461a      	mov	r2, r3
 800264e:	f002 fadb 	bl	8004c08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 020f 	and.w	r2, r3, #15
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	d901      	bls.n	8002682 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e042      	b.n	8002708 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002686:	2b00      	cmp	r3, #0
 8002688:	da0f      	bge.n	80026aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	3338      	adds	r3, #56	; 0x38
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	705a      	strb	r2, [r3, #1]
 80026a8:	e00f      	b.n	80026ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_EP_ClrStall+0x86>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e00e      	b.n	8002708 <HAL_PCD_EP_ClrStall+0xa4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 f8f3 	bl	80048e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800271c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	da0c      	bge.n	800273e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e00c      	b.n	8002758 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68f9      	ldr	r1, [r7, #12]
 800275e:	4618      	mov	r0, r3
 8002760:	f001 ff12 	bl	8004588 <USB_EPStopXfer>
 8002764:	4603      	mov	r3, r0
 8002766:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002768:	7afb      	ldrb	r3, [r7, #11]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b08a      	sub	sp, #40	; 0x28
 8002776:	af02      	add	r7, sp, #8
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	3338      	adds	r3, #56	; 0x38
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	3304      	adds	r3, #4
 8002798:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d901      	bls.n	80027aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06c      	b.n	8002884 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d902      	bls.n	80027c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3303      	adds	r3, #3
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ce:	e02b      	b.n	8002828 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d902      	bls.n	80027ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3303      	adds	r3, #3
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002804:	b2db      	uxtb	r3, r3
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	4603      	mov	r3, r0
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f001 ff66 	bl	80046dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	441a      	add	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	441a      	add	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	b29b      	uxth	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	429a      	cmp	r2, r3
 800283c:	d809      	bhi.n	8002852 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1a      	ldr	r2, [r3, #32]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002846:	429a      	cmp	r2, r3
 8002848:	d203      	bcs.n	8002852 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1be      	bne.n	80027d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	429a      	cmp	r2, r3
 800285c:	d811      	bhi.n	8002882 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	2201      	movs	r2, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	43db      	mvns	r3, r3
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800287e:	4013      	ands	r3, r2
 8002880:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	333c      	adds	r3, #60	; 0x3c
 80028a4:	3304      	adds	r3, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d17b      	bne.n	80029ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	f240 80b9 	bls.w	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80b3 	beq.w	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	e0a7      	b.n	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290e:	461a      	mov	r2, r3
 8002910:	2320      	movs	r3, #32
 8002912:	6093      	str	r3, [r2, #8]
 8002914:	e098      	b.n	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 8093 	bne.w	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4a4b      	ldr	r2, [pc, #300]	; (8002a54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d90f      	bls.n	800294a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	461a      	mov	r2, r3
 8002942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002946:	6093      	str	r3, [r2, #8]
 8002948:	e07e      	b.n	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	0159      	lsls	r1, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	440b      	add	r3, r1
 800296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	1ad2      	subs	r2, r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d114      	bne.n	80029ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002994:	461a      	mov	r2, r3
 8002996:	2101      	movs	r1, #1
 8002998:	f002 f936 	bl	8004c08 <USB_EP0_OutStart>
 800299c:	e006      	b.n	80029ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	441a      	add	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f004 fb58 	bl	8007068 <HAL_PCD_DataOutStageCallback>
 80029b8:	e046      	b.n	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d124      	bne.n	8002a0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029de:	6093      	str	r3, [r2, #8]
 80029e0:	e032      	b.n	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	2320      	movs	r3, #32
 80029fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f004 fb2f 	bl	8007068 <HAL_PCD_DataOutStageCallback>
 8002a0a:	e01d      	b.n	8002a48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d114      	bne.n	8002a3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a34:	461a      	mov	r2, r3
 8002a36:	2100      	movs	r1, #0
 8002a38:	f002 f8e6 	bl	8004c08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f004 fb10 	bl	8007068 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	4f54300a 	.word	0x4f54300a
 8002a58:	4f54310a 	.word	0x4f54310a

08002a5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	333c      	adds	r3, #60	; 0x3c
 8002a74:	3304      	adds	r3, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d90e      	bls.n	8002ab0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f004 fac7 	bl	8007044 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d90c      	bls.n	8002ad8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	f002 f898 	bl	8004c08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	4f54300a 	.word	0x4f54300a

08002ae8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
 8002af4:	4613      	mov	r3, r2
 8002af6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b06:	883b      	ldrh	r3, [r7, #0]
 8002b08:	0419      	lsls	r1, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
 8002b14:	e028      	b.n	8002b68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e00d      	b.n	8002b46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	3340      	adds	r3, #64	; 0x40
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	0c1b      	lsrs	r3, r3, #16
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	3301      	adds	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3ec      	bcc.n	8002b2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b50:	883b      	ldrh	r3, [r7, #0]
 8002b52:	0418      	lsls	r0, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4302      	orrs	r2, r0
 8002b60:	3340      	adds	r3, #64	; 0x40
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e267      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d075      	beq.n	8002cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d112      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d157      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e242      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x98>
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6f      	ldr	r2, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fd fec8 	bl	80009fc <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fd fec4 	bl	80009fc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e207      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fd feb4 	bl	80009fc <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fd feb0 	bl	80009fc <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1f3      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1c7      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4937      	ldr	r1, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fd fe69 	bl	80009fc <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fd fe65 	bl	80009fc <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1a8      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4925      	ldr	r1, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fd fe48 	bl	80009fc <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fd fe44 	bl	80009fc <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e187      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd fe28 	bl	80009fc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd fe24 	bl	80009fc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e167      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x200>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fd fe11 	bl	80009fc <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00e      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fd fe0d 	bl	80009fc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d907      	bls.n	8002dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e150      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ea      	bne.n	8002dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b77      	ldr	r3, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b74      	ldr	r3, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a73      	ldr	r2, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fd fdcd 	bl	80009fc <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fd fdc9 	bl	80009fc <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e10c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ea>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x30c>
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd fd8e 	bl	80009fc <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd fd8a 	bl	80009fc <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0cb      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x334>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fd fd78 	bl	80009fc <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fd fd74 	bl	80009fc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b5      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a38      	ldr	r2, [pc, #224]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a1 	beq.w	8003090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d05c      	beq.n	8003014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d141      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fd fd48 	bl	80009fc <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fd fd44 	bl	80009fc <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e087      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fd fd1d 	bl	80009fc <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fd fd19 	bl	80009fc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e05c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x416>
 8002fe4:	e054      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fd fd06 	bl	80009fc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fd fd02 	bl	80009fc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e045      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x444>
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e038      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
 8003028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d028      	beq.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d121      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fd fc34 	bl	80009fc <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fd fc30 	bl	80009fc <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fb94 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	08007698 	.word	0x08007698
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b094      	sub	sp, #80	; 0x50
 8003272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
 8003278:	2300      	movs	r3, #0
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	2300      	movs	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003284:	4b79      	ldr	r3, [pc, #484]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 8003290:	2b08      	cmp	r3, #8
 8003292:	f200 80e1 	bhi.w	8003458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x34>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800329e:	e0db      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032a4:	e0db      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <HAL_RCC_GetSysClockFreq+0x208>)
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032aa:	e0d8      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ac:	4b6f      	ldr	r3, [pc, #444]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b6:	4b6d      	ldr	r3, [pc, #436]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b6a      	ldr	r3, [pc, #424]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80032cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
 80032d6:	2300      	movs	r3, #0
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
 80032da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032de:	4622      	mov	r2, r4
 80032e0:	462b      	mov	r3, r5
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4621      	mov	r1, r4
 80032f8:	1a51      	subs	r1, r2, r1
 80032fa:	6139      	str	r1, [r7, #16]
 80032fc:	4629      	mov	r1, r5
 80032fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003310:	4659      	mov	r1, fp
 8003312:	018b      	lsls	r3, r1, #6
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331a:	4651      	mov	r1, sl
 800331c:	018a      	lsls	r2, r1, #6
 800331e:	4651      	mov	r1, sl
 8003320:	ebb2 0801 	subs.w	r8, r2, r1
 8003324:	4659      	mov	r1, fp
 8003326:	eb63 0901 	sbc.w	r9, r3, r1
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800333e:	4690      	mov	r8, r2
 8003340:	4699      	mov	r9, r3
 8003342:	4623      	mov	r3, r4
 8003344:	eb18 0303 	adds.w	r3, r8, r3
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	462b      	mov	r3, r5
 800334c:	eb49 0303 	adc.w	r3, r9, r3
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800335e:	4629      	mov	r1, r5
 8003360:	024b      	lsls	r3, r1, #9
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003368:	4621      	mov	r1, r4
 800336a:	024a      	lsls	r2, r1, #9
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003372:	2200      	movs	r2, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
 8003376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800337c:	f7fc ff24 	bl	80001c8 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003388:	e058      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	2200      	movs	r2, #0
 8003392:	4618      	mov	r0, r3
 8003394:	4611      	mov	r1, r2
 8003396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a4:	4642      	mov	r2, r8
 80033a6:	464b      	mov	r3, r9
 80033a8:	f04f 0000 	mov.w	r0, #0
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	0159      	lsls	r1, r3, #5
 80033b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b6:	0150      	lsls	r0, r2, #5
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4641      	mov	r1, r8
 80033be:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c2:	4649      	mov	r1, r9
 80033c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033dc:	ebb2 040a 	subs.w	r4, r2, sl
 80033e0:	eb63 050b 	sbc.w	r5, r3, fp
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	00eb      	lsls	r3, r5, #3
 80033ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f2:	00e2      	lsls	r2, r4, #3
 80033f4:	4614      	mov	r4, r2
 80033f6:	461d      	mov	r5, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	18e3      	adds	r3, r4, r3
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	464b      	mov	r3, r9
 8003400:	eb45 0303 	adc.w	r3, r5, r3
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003412:	4629      	mov	r1, r5
 8003414:	028b      	lsls	r3, r1, #10
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800341c:	4621      	mov	r1, r4
 800341e:	028a      	lsls	r2, r1, #10
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	61fa      	str	r2, [r7, #28]
 800342c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003430:	f7fc feca 	bl	80001c8 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800344c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800344e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003460:	4618      	mov	r0, r3
 8003462:	3750      	adds	r7, #80	; 0x50
 8003464:	46bd      	mov	sp, r7
 8003466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	007a1200 	.word	0x007a1200

08003478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000000 	.word	0x20000000

08003490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003490:	b084      	sub	sp, #16
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	f107 001c 	add.w	r0, r7, #28
 800349e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d122      	bne.n	80034ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f001 fbee 	bl	8004cc4 <USB_CoreReset>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e01a      	b.n	8003524 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f001 fbe2 	bl	8004cc4 <USB_CoreReset>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
 8003516:	e005      	b.n	8003524 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10b      	bne.n	8003542 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f043 0206 	orr.w	r2, r3, #6
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800354e:	b004      	add	sp, #16
 8003550:	4770      	bx	lr
	...

08003554 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d165      	bne.n	8003634 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4a41      	ldr	r2, [pc, #260]	; (8003670 <USB_SetTurnaroundTime+0x11c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d906      	bls.n	800357e <USB_SetTurnaroundTime+0x2a>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4a40      	ldr	r2, [pc, #256]	; (8003674 <USB_SetTurnaroundTime+0x120>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d202      	bcs.n	800357e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003578:	230f      	movs	r3, #15
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e062      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <USB_SetTurnaroundTime+0x120>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d306      	bcc.n	8003594 <USB_SetTurnaroundTime+0x40>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <USB_SetTurnaroundTime+0x124>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d202      	bcs.n	8003594 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800358e:	230e      	movs	r3, #14
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e057      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4a38      	ldr	r2, [pc, #224]	; (8003678 <USB_SetTurnaroundTime+0x124>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d306      	bcc.n	80035aa <USB_SetTurnaroundTime+0x56>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4a37      	ldr	r2, [pc, #220]	; (800367c <USB_SetTurnaroundTime+0x128>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d202      	bcs.n	80035aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035a4:	230d      	movs	r3, #13
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e04c      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a33      	ldr	r2, [pc, #204]	; (800367c <USB_SetTurnaroundTime+0x128>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d306      	bcc.n	80035c0 <USB_SetTurnaroundTime+0x6c>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4a32      	ldr	r2, [pc, #200]	; (8003680 <USB_SetTurnaroundTime+0x12c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d802      	bhi.n	80035c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035ba:	230c      	movs	r3, #12
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e041      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <USB_SetTurnaroundTime+0x12c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d906      	bls.n	80035d6 <USB_SetTurnaroundTime+0x82>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a2e      	ldr	r2, [pc, #184]	; (8003684 <USB_SetTurnaroundTime+0x130>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d802      	bhi.n	80035d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035d0:	230b      	movs	r3, #11
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e036      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <USB_SetTurnaroundTime+0x130>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d906      	bls.n	80035ec <USB_SetTurnaroundTime+0x98>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a29      	ldr	r2, [pc, #164]	; (8003688 <USB_SetTurnaroundTime+0x134>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035e6:	230a      	movs	r3, #10
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e02b      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <USB_SetTurnaroundTime+0x134>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d906      	bls.n	8003602 <USB_SetTurnaroundTime+0xae>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <USB_SetTurnaroundTime+0x138>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d202      	bcs.n	8003602 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035fc:	2309      	movs	r3, #9
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e020      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a21      	ldr	r2, [pc, #132]	; (800368c <USB_SetTurnaroundTime+0x138>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d306      	bcc.n	8003618 <USB_SetTurnaroundTime+0xc4>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <USB_SetTurnaroundTime+0x13c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d802      	bhi.n	8003618 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003612:	2308      	movs	r3, #8
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e015      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <USB_SetTurnaroundTime+0x13c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d906      	bls.n	800362e <USB_SetTurnaroundTime+0xda>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <USB_SetTurnaroundTime+0x140>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d202      	bcs.n	800362e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003628:	2307      	movs	r3, #7
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e00a      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800362e:	2306      	movs	r3, #6
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e007      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800363a:	2309      	movs	r3, #9
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e001      	b.n	8003644 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003640:	2309      	movs	r3, #9
 8003642:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	00d8acbf 	.word	0x00d8acbf
 8003674:	00e4e1c0 	.word	0x00e4e1c0
 8003678:	00f42400 	.word	0x00f42400
 800367c:	01067380 	.word	0x01067380
 8003680:	011a499f 	.word	0x011a499f
 8003684:	01312cff 	.word	0x01312cff
 8003688:	014ca43f 	.word	0x014ca43f
 800368c:	016e3600 	.word	0x016e3600
 8003690:	01a6ab1f 	.word	0x01a6ab1f
 8003694:	01e84800 	.word	0x01e84800

08003698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d115      	bne.n	800372a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800370a:	2001      	movs	r0, #1
 800370c:	f7fd f982 	bl	8000a14 <HAL_Delay>
      ms++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 fa45 	bl	8004ba6 <USB_GetMode>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d01e      	beq.n	8003760 <USB_SetCurrentMode+0x84>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b31      	cmp	r3, #49	; 0x31
 8003726:	d9f0      	bls.n	800370a <USB_SetCurrentMode+0x2e>
 8003728:	e01a      	b.n	8003760 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d115      	bne.n	800375c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800373c:	2001      	movs	r0, #1
 800373e:	f7fd f969 	bl	8000a14 <HAL_Delay>
      ms++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f001 fa2c 	bl	8004ba6 <USB_GetMode>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <USB_SetCurrentMode+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b31      	cmp	r3, #49	; 0x31
 8003758:	d9f0      	bls.n	800373c <USB_SetCurrentMode+0x60>
 800375a:	e001      	b.n	8003760 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e005      	b.n	800376c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b32      	cmp	r3, #50	; 0x32
 8003764:	d101      	bne.n	800376a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003774:	b084      	sub	sp, #16
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	e009      	b.n	80037a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	3340      	adds	r3, #64	; 0x40
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3301      	adds	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0e      	cmp	r3, #14
 80037ac:	d9f2      	bls.n	8003794 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11c      	bne.n	80037ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
 80037ec:	e00b      	b.n	8003806 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800380c:	461a      	mov	r2, r3
 800380e:	2300      	movs	r3, #0
 8003810:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	4619      	mov	r1, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003820:	461a      	mov	r2, r3
 8003822:	680b      	ldr	r3, [r1, #0]
 8003824:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10c      	bne.n	8003846 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003832:	2100      	movs	r1, #0
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f965 	bl	8003b04 <USB_SetDevSpeed>
 800383a:	e008      	b.n	800384e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800383c:	2101      	movs	r1, #1
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f960 	bl	8003b04 <USB_SetDevSpeed>
 8003844:	e003      	b.n	800384e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003846:	2103      	movs	r1, #3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f95b 	bl	8003b04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800384e:	2110      	movs	r1, #16
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8f3 	bl	8003a3c <USB_FlushTxFifo>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f91f 	bl	8003aa4 <USB_FlushRxFifo>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	461a      	mov	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	461a      	mov	r2, r3
 8003890:	2300      	movs	r3, #0
 8003892:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e043      	b.n	8003922 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b0:	d118      	bne.n	80038e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	461a      	mov	r2, r3
 80038c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	e013      	b.n	80038f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	461a      	mov	r2, r3
 80038dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e008      	b.n	80038f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f0:	461a      	mov	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003902:	461a      	mov	r2, r3
 8003904:	2300      	movs	r3, #0
 8003906:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800391a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	3301      	adds	r3, #1
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	429a      	cmp	r2, r3
 8003928:	d3b7      	bcc.n	800389a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e043      	b.n	80039b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003946:	d118      	bne.n	800397a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	461a      	mov	r2, r3
 800395c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e013      	b.n	800398c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	461a      	mov	r2, r3
 8003972:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e008      	b.n	800398c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d3b7      	bcc.n	8003930 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f043 0210 	orr.w	r2, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <USB_DevInit+0x2c4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f043 0208 	orr.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a34:	b004      	add	sp, #16
 8003a36:	4770      	bx	lr
 8003a38:	803c3800 	.word	0x803c3800

08003a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <USB_FlushTxFifo+0x64>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e01b      	b.n	8003a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	daf2      	bge.n	8003a4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	019b      	lsls	r3, r3, #6
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <USB_FlushTxFifo+0x64>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e006      	b.n	8003a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d0f0      	beq.n	8003a74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	00030d40 	.word	0x00030d40

08003aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <USB_FlushRxFifo+0x5c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e018      	b.n	8003af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	daf2      	bge.n	8003ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <USB_FlushRxFifo+0x5c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e006      	b.n	8003af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d0f0      	beq.n	8003ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	00030d40 	.word	0x00030d40

08003b04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b087      	sub	sp, #28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0306 	and.w	r3, r3, #6
 8003b4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]
 8003b5a:	e00a      	b.n	8003b72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d002      	beq.n	8003b68 <USB_GetDevSpeed+0x32>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d102      	bne.n	8003b6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	75fb      	strb	r3, [r7, #23]
 8003b6c:	e001      	b.n	8003b72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b6e:	230f      	movs	r3, #15
 8003b70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d13a      	bne.n	8003c12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d155      	bne.n	8003c80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	791b      	ldrb	r3, [r3, #4]
 8003bee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bf0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	059b      	lsls	r3, r3, #22
 8003bf6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e036      	b.n	8003c80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11a      	bne.n	8003c80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	791b      	ldrb	r3, [r3, #4]
 8003c64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c66:	430b      	orrs	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d161      	bne.n	8003d70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc2:	d11f      	bne.n	8003d04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ce2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d24:	4013      	ands	r3, r2
 8003d26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	2101      	movs	r1, #1
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	0159      	lsls	r1, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	4619      	mov	r1, r3
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <USB_DeactivateEndpoint+0x1b0>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
 8003d6e:	e060      	b.n	8003e32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d86:	d11f      	bne.n	8003dc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	43db      	mvns	r3, r3
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de8:	4013      	ands	r3, r2
 8003dea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	43db      	mvns	r3, r3
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	0159      	lsls	r1, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	440b      	add	r3, r1
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <USB_DeactivateEndpoint+0x1b4>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	ec337800 	.word	0xec337800
 8003e44:	eff37800 	.word	0xeff37800

08003e48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 815c 	bne.w	8004122 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d132      	bne.n	8003ed8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed0:	0cdb      	lsrs	r3, r3, #19
 8003ed2:	04db      	lsls	r3, r3, #19
 8003ed4:	6113      	str	r3, [r2, #16]
 8003ed6:	e074      	b.n	8003fc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef2:	0cdb      	lsrs	r3, r3, #19
 8003ef4:	04db      	lsls	r3, r3, #19
 8003ef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6999      	ldr	r1, [r3, #24]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	440b      	add	r3, r1
 8003f34:	1e59      	subs	r1, r3, #1
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f40:	4b9d      	ldr	r3, [pc, #628]	; (80041b8 <USB_EPStartXfer+0x370>)
 8003f42:	400b      	ands	r3, r1
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	0148      	lsls	r0, r1, #5
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	4401      	add	r1, r0
 8003f4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f50:	4313      	orrs	r3, r2
 8003f52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6a:	69b9      	ldr	r1, [r7, #24]
 8003f6c:	0148      	lsls	r0, r1, #5
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	4401      	add	r1, r0
 8003f72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f76:	4313      	orrs	r3, r2
 8003f78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	791b      	ldrb	r3, [r3, #4]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d11f      	bne.n	8003fc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003fa0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d14b      	bne.n	8004060 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d009      	beq.n	8003fe4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	791b      	ldrb	r3, [r3, #4]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d128      	bne.n	800403e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d110      	bne.n	800401e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e00f      	b.n	800403e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004058:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e133      	b.n	80042c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800407e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	791b      	ldrb	r3, [r3, #4]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d015      	beq.n	80040b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 811b 	beq.w	80042c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ae:	4313      	orrs	r3, r2
 80040b0:	634b      	str	r3, [r1, #52]	; 0x34
 80040b2:	e109      	b.n	80042c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d110      	bne.n	80040e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e00f      	b.n	8004106 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6919      	ldr	r1, [r3, #16]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	b298      	uxth	r0, r3
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4603      	mov	r3, r0
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fade 	bl	80046dc <USB_WritePacket>
 8004120:	e0d2      	b.n	80042c8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413c:	0cdb      	lsrs	r3, r3, #19
 800413e:	04db      	lsls	r3, r3, #19
 8004140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800415c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004164:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d126      	bne.n	80041bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	0148      	lsls	r0, r1, #5
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	4401      	add	r1, r0
 800418c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b2:	6113      	str	r3, [r2, #16]
 80041b4:	e03a      	b.n	800422c <USB_EPStartXfer+0x3e4>
 80041b6:	bf00      	nop
 80041b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	1e5a      	subs	r2, r3, #1
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	8afa      	ldrh	r2, [r7, #22]
 80041d8:	fb03 f202 	mul.w	r2, r3, r2
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	04d9      	lsls	r1, r3, #19
 80041f2:	4b38      	ldr	r3, [pc, #224]	; (80042d4 <USB_EPStartXfer+0x48c>)
 80041f4:	400b      	ands	r3, r1
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	0148      	lsls	r0, r1, #5
 80041fa:	69f9      	ldr	r1, [r7, #28]
 80041fc:	4401      	add	r1, r0
 80041fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004202:	4313      	orrs	r3, r2
 8004204:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421c:	69b9      	ldr	r1, [r7, #24]
 800421e:	0148      	lsls	r0, r1, #5
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	4401      	add	r1, r0
 8004224:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004228:	4313      	orrs	r3, r2
 800422a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d10d      	bne.n	800424e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	460a      	mov	r2, r1
 800424c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	791b      	ldrb	r3, [r3, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d128      	bne.n	80042a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d110      	bne.n	8004288 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e00f      	b.n	80042a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	1ff80000 	.word	0x1ff80000

080042d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 80ce 	bne.w	8004496 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d132      	bne.n	8004368 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004320:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004360:	0cdb      	lsrs	r3, r3, #19
 8004362:	04db      	lsls	r3, r3, #19
 8004364:	6113      	str	r3, [r2, #16]
 8004366:	e04e      	b.n	8004406 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004382:	0cdb      	lsrs	r3, r3, #19
 8004384:	04db      	lsls	r3, r3, #19
 8004386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	440a      	add	r2, r1
 800439e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d903      	bls.n	80043c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	0148      	lsls	r0, r1, #5
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	4401      	add	r1, r0
 80043fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d11e      	bne.n	800444a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	461a      	mov	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	e097      	b.n	800457a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004468:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8083 	beq.w	800457a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	2101      	movs	r1, #1
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	6979      	ldr	r1, [r7, #20]
 800448c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004490:	4313      	orrs	r3, r2
 8004492:	634b      	str	r3, [r1, #52]	; 0x34
 8004494:	e071      	b.n	800457a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b0:	0cdb      	lsrs	r3, r3, #19
 80044b2:	04db      	lsls	r3, r3, #19
 80044b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	0151      	lsls	r1, r2, #5
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	440a      	add	r2, r1
 8004508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800450c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	6939      	ldr	r1, [r7, #16]
 800452a:	0148      	lsls	r0, r1, #5
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	4401      	add	r1, r0
 8004530:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d10d      	bne.n	800455a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6919      	ldr	r1, [r3, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	460a      	mov	r2, r1
 8004558:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d14a      	bne.n	800463c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045be:	f040 8086 	bne.w	80046ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004608:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3301      	adds	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f242 7210 	movw	r2, #10000	; 0x2710
 8004616:	4293      	cmp	r3, r2
 8004618:	d902      	bls.n	8004620 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
          break;
 800461e:	e056      	b.n	80046ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004638:	d0e7      	beq.n	800460a <USB_EPStopXfer+0x82>
 800463a:	e048      	b.n	80046ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004654:	d13b      	bne.n	80046ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004678:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d902      	bls.n	80046b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
          break;
 80046b2:	e00c      	b.n	80046ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046cc:	d0e7      	beq.n	800469e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	460b      	mov	r3, r1
 80046ec:	71fb      	strb	r3, [r7, #7]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d123      	bne.n	800474a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004702:	88bb      	ldrh	r3, [r7, #4]
 8004704:	3303      	adds	r3, #3
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e018      	b.n	8004742 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	031a      	lsls	r2, r3, #12
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	4413      	add	r3, r2
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	461a      	mov	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	3301      	adds	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3301      	adds	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	3301      	adds	r3, #1
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	429a      	cmp	r2, r3
 8004748:	d3e2      	bcc.n	8004710 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3724      	adds	r7, #36	; 0x24
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004758:	b480      	push	{r7}
 800475a:	b08b      	sub	sp, #44	; 0x2c
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	b29b      	uxth	r3, r3
 8004774:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	e014      	b.n	80047ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	3301      	adds	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	3301      	adds	r3, #1
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	3301      	adds	r3, #1
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	3301      	adds	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	3301      	adds	r3, #1
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d3e6      	bcc.n	8004784 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047b6:	8bfb      	ldrh	r3, [r7, #30]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01e      	beq.n	80047fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	461a      	mov	r2, r3
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	701a      	strb	r2, [r3, #0]
      i++;
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	3301      	adds	r3, #1
 80047e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047ee:	8bfb      	ldrh	r3, [r7, #30]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047f4:	8bfb      	ldrh	r3, [r7, #30]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ea      	bne.n	80047d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	372c      	adds	r7, #44	; 0x2c
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d12c      	bne.n	800487e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	db12      	blt.n	800485c <USB_EPSetStall+0x54>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00f      	beq.n	800485c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004856:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800485a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e02b      	b.n	80048d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	db12      	blt.n	80048b6 <USB_EPSetStall+0xae>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00f      	beq.n	80048b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d128      	bne.n	8004952 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800491e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	791b      	ldrb	r3, [r3, #4]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d003      	beq.n	8004930 <USB_EPClearStall+0x4c>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	791b      	ldrb	r3, [r3, #4]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d138      	bne.n	80049a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e027      	b.n	80049a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004970:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	791b      	ldrb	r3, [r3, #4]
 8004976:	2b03      	cmp	r3, #3
 8004978:	d003      	beq.n	8004982 <USB_EPClearStall+0x9e>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	791b      	ldrb	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d10f      	bne.n	80049a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2a:	f023 0302 	bic.w	r3, r3, #2
 8004a2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a98:	68fb      	ldr	r3, [r7, #12]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0c1b      	lsrs	r3, r3, #16
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	b29b      	uxth	r3, r3
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	01db      	lsls	r3, r3, #7
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b98:	68bb      	ldr	r3, [r7, #8]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004be0:	f023 0307 	bic.w	r3, r3, #7
 8004be4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	460b      	mov	r3, r1
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	333c      	adds	r3, #60	; 0x3c
 8004c1e:	3304      	adds	r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <USB_EP0_OutStart+0xb8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d90a      	bls.n	8004c42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c3c:	d101      	bne.n	8004c42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e037      	b.n	8004cb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c70:	f043 0318 	orr.w	r3, r3, #24
 8004c74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c8a:	7afb      	ldrb	r3, [r7, #11]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10f      	bne.n	8004cb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004caa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	4f54300a 	.word	0x4f54300a

08004cc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <USB_CoreReset+0x64>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e01b      	b.n	8004d1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	daf2      	bge.n	8004cd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <USB_CoreReset+0x64>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e006      	b.n	8004d1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d0f0      	beq.n	8004cfa <USB_CoreReset+0x36>

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	00030d40 	.word	0x00030d40

08004d2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d3c:	f002 fbfe 	bl	800753c <USBD_static_malloc>
 8004d40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32b0      	adds	r2, #176	; 0xb0
 8004d52:	2100      	movs	r1, #0
 8004d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0d4      	b.n	8004f06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004d5c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d60:	2100      	movs	r1, #0
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f002 fc60 	bl	8007628 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	32b0      	adds	r2, #176	; 0xb0
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	32b0      	adds	r2, #176	; 0xb0
 8004d82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7c1b      	ldrb	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d138      	bne.n	8004e06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d94:	4b5e      	ldr	r3, [pc, #376]	; (8004f10 <USBD_CDC_Init+0x1e4>)
 8004d96:	7819      	ldrb	r1, [r3, #0]
 8004d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f002 faa9 	bl	80072f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004da4:	4b5a      	ldr	r3, [pc, #360]	; (8004f10 <USBD_CDC_Init+0x1e4>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	2201      	movs	r2, #1
 8004dbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004dbe:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <USBD_CDC_Init+0x1e8>)
 8004dc0:	7819      	ldrb	r1, [r3, #0]
 8004dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f002 fa94 	bl	80072f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004dce:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <USBD_CDC_Init+0x1e8>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004de6:	2201      	movs	r2, #1
 8004de8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004dea:	4b4b      	ldr	r3, [pc, #300]	; (8004f18 <USBD_CDC_Init+0x1ec>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3326      	adds	r3, #38	; 0x26
 8004e00:	2210      	movs	r2, #16
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e035      	b.n	8004e72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e06:	4b42      	ldr	r3, [pc, #264]	; (8004f10 <USBD_CDC_Init+0x1e4>)
 8004e08:	7819      	ldrb	r1, [r3, #0]
 8004e0a:	2340      	movs	r3, #64	; 0x40
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f002 fa71 	bl	80072f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e14:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <USBD_CDC_Init+0x1e4>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3324      	adds	r3, #36	; 0x24
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <USBD_CDC_Init+0x1e8>)
 8004e30:	7819      	ldrb	r1, [r3, #0]
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	2202      	movs	r2, #2
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f002 fa5d 	bl	80072f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <USBD_CDC_Init+0x1e8>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e54:	2201      	movs	r2, #1
 8004e56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e58:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <USBD_CDC_Init+0x1ec>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 020f 	and.w	r2, r3, #15
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3326      	adds	r3, #38	; 0x26
 8004e6e:	2210      	movs	r2, #16
 8004e70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e72:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <USBD_CDC_Init+0x1ec>)
 8004e74:	7819      	ldrb	r1, [r3, #0]
 8004e76:	2308      	movs	r3, #8
 8004e78:	2203      	movs	r2, #3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f002 fa3b 	bl	80072f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <USBD_CDC_Init+0x1ec>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3324      	adds	r3, #36	; 0x24
 8004e96:	2201      	movs	r2, #1
 8004e98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	33b0      	adds	r3, #176	; 0xb0
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e018      	b.n	8004f06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7c1b      	ldrb	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <USBD_CDC_Init+0x1e8>)
 8004ede:	7819      	ldrb	r1, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f002 faf2 	bl	80074d4 <USBD_LL_PrepareReceive>
 8004ef0:	e008      	b.n	8004f04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <USBD_CDC_Init+0x1e8>)
 8004ef4:	7819      	ldrb	r1, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004efc:	2340      	movs	r3, #64	; 0x40
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f002 fae8 	bl	80074d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000093 	.word	0x20000093
 8004f14:	20000094 	.word	0x20000094
 8004f18:	20000095 	.word	0x20000095

08004f1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004f28:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <USBD_CDC_DeInit+0xf8>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f002 fa07 	bl	8007342 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f34:	4b37      	ldr	r3, [pc, #220]	; (8005014 <USBD_CDC_DeInit+0xf8>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	f003 020f 	and.w	r2, r3, #15
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3324      	adds	r3, #36	; 0x24
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f4e:	4b32      	ldr	r3, [pc, #200]	; (8005018 <USBD_CDC_DeInit+0xfc>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f002 f9f4 	bl	8007342 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <USBD_CDC_DeInit+0xfc>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	f003 020f 	and.w	r2, r3, #15
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f72:	2200      	movs	r2, #0
 8004f74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004f76:	4b29      	ldr	r3, [pc, #164]	; (800501c <USBD_CDC_DeInit+0x100>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f002 f9e0 	bl	8007342 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <USBD_CDC_DeInit+0x100>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f003 020f 	and.w	r2, r3, #15
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	3324      	adds	r3, #36	; 0x24
 8004f98:	2200      	movs	r2, #0
 8004f9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f9c:	4b1f      	ldr	r3, [pc, #124]	; (800501c <USBD_CDC_DeInit+0x100>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3326      	adds	r3, #38	; 0x26
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	32b0      	adds	r2, #176	; 0xb0
 8004fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01f      	beq.n	8005008 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	33b0      	adds	r3, #176	; 0xb0
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	32b0      	adds	r2, #176	; 0xb0
 8004fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 fab4 	bl	8007558 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	32b0      	adds	r2, #176	; 0xb0
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000093 	.word	0x20000093
 8005018:	20000094 	.word	0x20000094
 800501c:	20000095 	.word	0x20000095

08005020 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	32b0      	adds	r2, #176	; 0xb0
 8005034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005038:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800504c:	2303      	movs	r3, #3
 800504e:	e0bf      	b.n	80051d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005058:	2b00      	cmp	r3, #0
 800505a:	d050      	beq.n	80050fe <USBD_CDC_Setup+0xde>
 800505c:	2b20      	cmp	r3, #32
 800505e:	f040 80af 	bne.w	80051c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	88db      	ldrh	r3, [r3, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03a      	beq.n	80050e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b25b      	sxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	da1b      	bge.n	80050ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	33b0      	adds	r3, #176	; 0xb0
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800508a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	88d2      	ldrh	r2, [r2, #6]
 8005090:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	88db      	ldrh	r3, [r3, #6]
 8005096:	2b07      	cmp	r3, #7
 8005098:	bf28      	it	cs
 800509a:	2307      	movcs	r3, #7
 800509c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	89fa      	ldrh	r2, [r7, #14]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 fd0d 	bl	8006ac4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80050aa:	e090      	b.n	80051ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	785a      	ldrb	r2, [r3, #1]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	88db      	ldrh	r3, [r3, #6]
 80050ba:	2b3f      	cmp	r3, #63	; 0x3f
 80050bc:	d803      	bhi.n	80050c6 <USBD_CDC_Setup+0xa6>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	88db      	ldrh	r3, [r3, #6]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	e000      	b.n	80050c8 <USBD_CDC_Setup+0xa8>
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80050ce:	6939      	ldr	r1, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80050d6:	461a      	mov	r2, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 fd1f 	bl	8006b1c <USBD_CtlPrepareRx>
      break;
 80050de:	e076      	b.n	80051ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	33b0      	adds	r3, #176	; 0xb0
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	7850      	ldrb	r0, [r2, #1]
 80050f6:	2200      	movs	r2, #0
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	4798      	blx	r3
      break;
 80050fc:	e067      	b.n	80051ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b0b      	cmp	r3, #11
 8005104:	d851      	bhi.n	80051aa <USBD_CDC_Setup+0x18a>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <USBD_CDC_Setup+0xec>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	0800513d 	.word	0x0800513d
 8005110:	080051b9 	.word	0x080051b9
 8005114:	080051ab 	.word	0x080051ab
 8005118:	080051ab 	.word	0x080051ab
 800511c:	080051ab 	.word	0x080051ab
 8005120:	080051ab 	.word	0x080051ab
 8005124:	080051ab 	.word	0x080051ab
 8005128:	080051ab 	.word	0x080051ab
 800512c:	080051ab 	.word	0x080051ab
 8005130:	080051ab 	.word	0x080051ab
 8005134:	08005167 	.word	0x08005167
 8005138:	08005191 	.word	0x08005191
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b03      	cmp	r3, #3
 8005146:	d107      	bne.n	8005158 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005148:	f107 030a 	add.w	r3, r7, #10
 800514c:	2202      	movs	r2, #2
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f001 fcb7 	bl	8006ac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005156:	e032      	b.n	80051be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fc41 	bl	80069e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005160:	2303      	movs	r3, #3
 8005162:	75fb      	strb	r3, [r7, #23]
          break;
 8005164:	e02b      	b.n	80051be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d107      	bne.n	8005182 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005172:	f107 030d 	add.w	r3, r7, #13
 8005176:	2201      	movs	r2, #1
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 fca2 	bl	8006ac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005180:	e01d      	b.n	80051be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 fc2c 	bl	80069e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800518a:	2303      	movs	r3, #3
 800518c:	75fb      	strb	r3, [r7, #23]
          break;
 800518e:	e016      	b.n	80051be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b03      	cmp	r3, #3
 800519a:	d00f      	beq.n	80051bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fc1f 	bl	80069e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051a8:	e008      	b.n	80051bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 fc18 	bl	80069e2 <USBD_CtlError>
          ret = USBD_FAIL;
 80051b2:	2303      	movs	r3, #3
 80051b4:	75fb      	strb	r3, [r7, #23]
          break;
 80051b6:	e002      	b.n	80051be <USBD_CDC_Setup+0x19e>
          break;
 80051b8:	bf00      	nop
 80051ba:	e008      	b.n	80051ce <USBD_CDC_Setup+0x1ae>
          break;
 80051bc:	bf00      	nop
      }
      break;
 80051be:	e006      	b.n	80051ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 fc0d 	bl	80069e2 <USBD_CtlError>
      ret = USBD_FAIL;
 80051c8:	2303      	movs	r3, #3
 80051ca:	75fb      	strb	r3, [r7, #23]
      break;
 80051cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80051ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	32b0      	adds	r2, #176	; 0xb0
 80051f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80051fe:	2303      	movs	r3, #3
 8005200:	e065      	b.n	80052ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	32b0      	adds	r2, #176	; 0xb0
 800520c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005210:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	3318      	adds	r3, #24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02f      	beq.n	800528c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	3318      	adds	r3, #24
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	f003 010f 	and.w	r1, r3, #15
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	460b      	mov	r3, r1
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4403      	add	r3, r0
 8005254:	3348      	adds	r3, #72	; 0x48
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	fbb2 f1f3 	udiv	r1, r2, r3
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005262:	2b00      	cmp	r3, #0
 8005264:	d112      	bne.n	800528c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	3318      	adds	r3, #24
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800527e:	78f9      	ldrb	r1, [r7, #3]
 8005280:	2300      	movs	r3, #0
 8005282:	2200      	movs	r2, #0
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f002 f904 	bl	8007492 <USBD_LL_Transmit>
 800528a:	e01f      	b.n	80052cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	33b0      	adds	r3, #176	; 0xb0
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d010      	beq.n	80052cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	33b0      	adds	r3, #176	; 0xb0
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	32b0      	adds	r2, #176	; 0xb0
 80052ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	32b0      	adds	r2, #176	; 0xb0
 80052fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005304:	2303      	movs	r3, #3
 8005306:	e01a      	b.n	800533e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f002 f902 	bl	8007516 <USBD_LL_GetRxDataSize>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	33b0      	adds	r3, #176	; 0xb0
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005338:	4611      	mov	r1, r2
 800533a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	32b0      	adds	r2, #176	; 0xb0
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	e025      	b.n	80053b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	33b0      	adds	r3, #176	; 0xb0
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <USBD_CDC_EP0_RxReady+0x6c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005382:	2bff      	cmp	r3, #255	; 0xff
 8005384:	d015      	beq.n	80053b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	33b0      	adds	r3, #176	; 0xb0
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800539e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053a6:	b292      	uxth	r2, r2
 80053a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053c4:	2182      	movs	r1, #130	; 0x82
 80053c6:	4818      	ldr	r0, [pc, #96]	; (8005428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053c8:	f000 fcd2 	bl	8005d70 <USBD_GetEpDesc>
 80053cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053ce:	2101      	movs	r1, #1
 80053d0:	4815      	ldr	r0, [pc, #84]	; (8005428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053d2:	f000 fccd 	bl	8005d70 <USBD_GetEpDesc>
 80053d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053d8:	2181      	movs	r1, #129	; 0x81
 80053da:	4813      	ldr	r0, [pc, #76]	; (8005428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053dc:	f000 fcc8 	bl	8005d70 <USBD_GetEpDesc>
 80053e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2210      	movs	r2, #16
 80053ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fc:	711a      	strb	r2, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005410:	711a      	strb	r2, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2243      	movs	r2, #67	; 0x43
 800541a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000050 	.word	0x20000050

0800542c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005434:	2182      	movs	r1, #130	; 0x82
 8005436:	4818      	ldr	r0, [pc, #96]	; (8005498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005438:	f000 fc9a 	bl	8005d70 <USBD_GetEpDesc>
 800543c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800543e:	2101      	movs	r1, #1
 8005440:	4815      	ldr	r0, [pc, #84]	; (8005498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005442:	f000 fc95 	bl	8005d70 <USBD_GetEpDesc>
 8005446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005448:	2181      	movs	r1, #129	; 0x81
 800544a:	4813      	ldr	r0, [pc, #76]	; (8005498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800544c:	f000 fc90 	bl	8005d70 <USBD_GetEpDesc>
 8005450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2210      	movs	r2, #16
 800545c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2200      	movs	r2, #0
 8005468:	711a      	strb	r2, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f042 0202 	orr.w	r2, r2, #2
 8005470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	711a      	strb	r2, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f042 0202 	orr.w	r2, r2, #2
 8005484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2243      	movs	r2, #67	; 0x43
 800548a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800548c:	4b02      	ldr	r3, [pc, #8]	; (8005498 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000050 	.word	0x20000050

0800549c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054a4:	2182      	movs	r1, #130	; 0x82
 80054a6:	4818      	ldr	r0, [pc, #96]	; (8005508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054a8:	f000 fc62 	bl	8005d70 <USBD_GetEpDesc>
 80054ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054ae:	2101      	movs	r1, #1
 80054b0:	4815      	ldr	r0, [pc, #84]	; (8005508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054b2:	f000 fc5d 	bl	8005d70 <USBD_GetEpDesc>
 80054b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054b8:	2181      	movs	r1, #129	; 0x81
 80054ba:	4813      	ldr	r0, [pc, #76]	; (8005508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054bc:	f000 fc58 	bl	8005d70 <USBD_GetEpDesc>
 80054c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2210      	movs	r2, #16
 80054cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054dc:	711a      	strb	r2, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f0:	711a      	strb	r2, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2243      	movs	r2, #67	; 0x43
 80054fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054fc:	4b02      	ldr	r3, [pc, #8]	; (8005508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000050 	.word	0x20000050

0800550c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	220a      	movs	r2, #10
 8005518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800551a:	4b03      	ldr	r3, [pc, #12]	; (8005528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	2000000c 	.word	0x2000000c

0800552c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800553c:	2303      	movs	r3, #3
 800553e:	e009      	b.n	8005554 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	33b0      	adds	r3, #176	; 0xb0
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	32b0      	adds	r2, #176	; 0xb0
 8005576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005582:	2303      	movs	r3, #3
 8005584:	e008      	b.n	8005598 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	32b0      	adds	r2, #176	; 0xb0
 80055b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e004      	b.n	80055d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e01f      	b.n	8005636 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	79fa      	ldrb	r2, [r7, #7]
 8005628:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f001 fdfc 	bl	8007228 <USBD_LL_Init>
 8005630:	4603      	mov	r3, r0
 8005632:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005652:	2303      	movs	r3, #3
 8005654:	e025      	b.n	80056a2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	32ae      	adds	r2, #174	; 0xae
 8005668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00f      	beq.n	8005692 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	32ae      	adds	r2, #174	; 0xae
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f107 020e 	add.w	r2, r7, #14
 8005686:	4610      	mov	r0, r2
 8005688:	4798      	blx	r3
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fe04 	bl	80072c0 <USBD_LL_Start>
 80056b8:	4603      	mov	r3, r0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056ca:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	4611      	mov	r1, r2
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005706:	7bfb      	ldrb	r3, [r7, #15]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	4611      	mov	r1, r2
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005736:	2303      	movs	r3, #3
 8005738:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f001 f909 	bl	800696e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800576a:	461a      	mov	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2b02      	cmp	r3, #2
 800577e:	d01a      	beq.n	80057b6 <USBD_LL_SetupStage+0x72>
 8005780:	2b02      	cmp	r3, #2
 8005782:	d822      	bhi.n	80057ca <USBD_LL_SetupStage+0x86>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <USBD_LL_SetupStage+0x4a>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d00a      	beq.n	80057a2 <USBD_LL_SetupStage+0x5e>
 800578c:	e01d      	b.n	80057ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb60 	bl	8005e5c <USBD_StdDevReq>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]
      break;
 80057a0:	e020      	b.n	80057e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fbc8 	bl	8005f40 <USBD_StdItfReq>
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	e016      	b.n	80057e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fc2a 	bl	8006018 <USBD_StdEPReq>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	e00c      	b.n	80057e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fdd1 	bl	8007380 <USBD_LL_StallEP>
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]
      break;
 80057e2:	bf00      	nop
  }

  return ret;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	460b      	mov	r3, r1
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d16e      	bne.n	80058e4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800580c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005814:	2b03      	cmp	r3, #3
 8005816:	f040 8098 	bne.w	800594a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	429a      	cmp	r2, r3
 8005824:	d913      	bls.n	800584e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4293      	cmp	r3, r2
 800583e:	bf28      	it	cs
 8005840:	4613      	movcs	r3, r2
 8005842:	461a      	mov	r2, r3
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 f985 	bl	8006b56 <USBD_CtlContinueRx>
 800584c:	e07d      	b.n	800594a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2b02      	cmp	r3, #2
 800585a:	d014      	beq.n	8005886 <USBD_LL_DataOutStage+0x98>
 800585c:	2b02      	cmp	r3, #2
 800585e:	d81d      	bhi.n	800589c <USBD_LL_DataOutStage+0xae>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <USBD_LL_DataOutStage+0x7c>
 8005864:	2b01      	cmp	r3, #1
 8005866:	d003      	beq.n	8005870 <USBD_LL_DataOutStage+0x82>
 8005868:	e018      	b.n	800589c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	75bb      	strb	r3, [r7, #22]
            break;
 800586e:	e018      	b.n	80058a2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005876:	b2db      	uxtb	r3, r3
 8005878:	4619      	mov	r1, r3
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fa5e 	bl	8005d3c <USBD_CoreFindIF>
 8005880:	4603      	mov	r3, r0
 8005882:	75bb      	strb	r3, [r7, #22]
            break;
 8005884:	e00d      	b.n	80058a2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800588c:	b2db      	uxtb	r3, r3
 800588e:	4619      	mov	r1, r3
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fa60 	bl	8005d56 <USBD_CoreFindEP>
 8005896:	4603      	mov	r3, r0
 8005898:	75bb      	strb	r3, [r7, #22]
            break;
 800589a:	e002      	b.n	80058a2 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	75bb      	strb	r3, [r7, #22]
            break;
 80058a0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80058a2:	7dbb      	ldrb	r3, [r7, #22]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d119      	bne.n	80058dc <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d113      	bne.n	80058dc <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80058b4:	7dba      	ldrb	r2, [r7, #22]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	32ae      	adds	r2, #174	; 0xae
 80058ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80058c4:	7dba      	ldrb	r2, [r7, #22]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80058cc:	7dba      	ldrb	r2, [r7, #22]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	32ae      	adds	r2, #174	; 0xae
 80058d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f001 f94b 	bl	8006b78 <USBD_CtlSendStatus>
 80058e2:	e032      	b.n	800594a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	4619      	mov	r1, r3
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fa31 	bl	8005d56 <USBD_CoreFindEP>
 80058f4:	4603      	mov	r3, r0
 80058f6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058f8:	7dbb      	ldrb	r3, [r7, #22]
 80058fa:	2bff      	cmp	r3, #255	; 0xff
 80058fc:	d025      	beq.n	800594a <USBD_LL_DataOutStage+0x15c>
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d122      	bne.n	800594a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b03      	cmp	r3, #3
 800590e:	d117      	bne.n	8005940 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005910:	7dba      	ldrb	r2, [r7, #22]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	32ae      	adds	r2, #174	; 0xae
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005920:	7dba      	ldrb	r2, [r7, #22]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005928:	7dba      	ldrb	r2, [r7, #22]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	32ae      	adds	r2, #174	; 0xae
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	7afa      	ldrb	r2, [r7, #11]
 8005936:	4611      	mov	r1, r2
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	4798      	blx	r3
 800593c:	4603      	mov	r3, r0
 800593e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	e000      	b.n	800594c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	460b      	mov	r3, r1
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d16f      	bne.n	8005a48 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3314      	adds	r3, #20
 800596c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005974:	2b02      	cmp	r3, #2
 8005976:	d15a      	bne.n	8005a2e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	429a      	cmp	r2, r3
 8005982:	d914      	bls.n	80059ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	461a      	mov	r2, r3
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f001 f8ad 	bl	8006afa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059a0:	2300      	movs	r3, #0
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f001 fd94 	bl	80074d4 <USBD_LL_PrepareReceive>
 80059ac:	e03f      	b.n	8005a2e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d11c      	bne.n	80059f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d316      	bcc.n	80059f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d20f      	bcs.n	80059f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059d4:	2200      	movs	r2, #0
 80059d6:	2100      	movs	r1, #0
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f001 f88e 	bl	8006afa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059e6:	2300      	movs	r3, #0
 80059e8:	2200      	movs	r2, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f001 fd71 	bl	80074d4 <USBD_LL_PrepareReceive>
 80059f2:	e01c      	b.n	8005a2e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d10f      	bne.n	8005a20 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f001 fcac 	bl	8007380 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f001 f8b8 	bl	8006b9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d03a      	beq.n	8005aae <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fe42 	bl	80056c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a46:	e032      	b.n	8005aae <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f97f 	bl	8005d56 <USBD_CoreFindEP>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	2bff      	cmp	r3, #255	; 0xff
 8005a60:	d025      	beq.n	8005aae <USBD_LL_DataInStage+0x15a>
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d122      	bne.n	8005aae <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d11c      	bne.n	8005aae <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a74:	7dfa      	ldrb	r2, [r7, #23]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	32ae      	adds	r2, #174	; 0xae
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d014      	beq.n	8005aae <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a84:	7dfa      	ldrb	r2, [r7, #23]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a8c:	7dfa      	ldrb	r2, [r7, #23]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	32ae      	adds	r2, #174	; 0xae
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	7afa      	ldrb	r2, [r7, #11]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	4798      	blx	r3
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005aa4:	7dbb      	ldrb	r3, [r7, #22]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005aaa:	7dbb      	ldrb	r3, [r7, #22]
 8005aac:	e000      	b.n	8005ab0 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d014      	beq.n	8005b1e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6852      	ldr	r2, [r2, #4]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	4611      	mov	r1, r2
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	2200      	movs	r2, #0
 8005b22:	2100      	movs	r1, #0
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fbe6 	bl	80072f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b3a:	2340      	movs	r3, #64	; 0x40
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 fbd8 	bl	80072f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	621a      	str	r2, [r3, #32]

  return ret;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	78fa      	ldrb	r2, [r7, #3]
 8005b6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d106      	bne.n	8005bca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d110      	bne.n	8005c0e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32ae      	adds	r2, #174	; 0xae
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e01c      	b.n	8005c74 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d115      	bne.n	8005c72 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	32ae      	adds	r2, #174	; 0xae
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	32ae      	adds	r2, #174	; 0xae
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	32ae      	adds	r2, #174	; 0xae
 8005c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e01c      	b.n	8005cd8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d115      	bne.n	8005cd6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	32ae      	adds	r2, #174	; 0xae
 8005cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	32ae      	adds	r2, #174	; 0xae
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6852      	ldr	r2, [r2, #4]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	4611      	mov	r1, r2
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	885b      	ldrh	r3, [r3, #2]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d920      	bls.n	8005dda <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005da0:	e013      	b.n	8005dca <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005da2:	f107 030a 	add.w	r3, r7, #10
 8005da6:	4619      	mov	r1, r3
 8005da8:	6978      	ldr	r0, [r7, #20]
 8005daa:	f000 f81b 	bl	8005de4 <USBD_GetNextDesc>
 8005dae:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	d108      	bne.n	8005dca <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	789b      	ldrb	r3, [r3, #2]
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d008      	beq.n	8005dd8 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	885b      	ldrh	r3, [r3, #2]
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	897b      	ldrh	r3, [r7, #10]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d8e5      	bhi.n	8005da2 <USBD_GetEpDesc+0x32>
 8005dd6:	e000      	b.n	8005dda <USBD_GetEpDesc+0x6a>
          break;
 8005dd8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005dda:	693b      	ldr	r3, [r7, #16]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e10:	68fb      	ldr	r3, [r7, #12]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3301      	adds	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e3c:	8a3b      	ldrh	r3, [r7, #16]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	b21a      	sxth	r2, r3
 8005e42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	b21b      	sxth	r3, r3
 8005e4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e4c:	89fb      	ldrh	r3, [r7, #14]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d005      	beq.n	8005e82 <USBD_StdDevReq+0x26>
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d857      	bhi.n	8005f2a <USBD_StdDevReq+0xce>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00f      	beq.n	8005e9e <USBD_StdDevReq+0x42>
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d153      	bne.n	8005f2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32ae      	adds	r2, #174	; 0xae
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9c:	e04a      	b.n	8005f34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b09      	cmp	r3, #9
 8005ea4:	d83b      	bhi.n	8005f1e <USBD_StdDevReq+0xc2>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <USBD_StdDevReq+0x50>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f1f 	.word	0x08005f1f
 8005eb8:	08005f0b 	.word	0x08005f0b
 8005ebc:	08005f1f 	.word	0x08005f1f
 8005ec0:	08005edf 	.word	0x08005edf
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005f1f 	.word	0x08005f1f
 8005ecc:	08005ef7 	.word	0x08005ef7
 8005ed0:	08005ee9 	.word	0x08005ee9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa3c 	bl	8006354 <USBD_GetDescriptor>
          break;
 8005edc:	e024      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fba1 	bl	8006628 <USBD_SetAddress>
          break;
 8005ee6:	e01f      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fbe0 	bl	80066b0 <USBD_SetConfig>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ef4:	e018      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fc83 	bl	8006804 <USBD_GetConfig>
          break;
 8005efe:	e013      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fcb4 	bl	8006870 <USBD_GetStatus>
          break;
 8005f08:	e00e      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fce3 	bl	80068d8 <USBD_SetFeature>
          break;
 8005f12:	e009      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fd07 	bl	800692a <USBD_ClrFeature>
          break;
 8005f1c:	e004      	b.n	8005f28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fd5e 	bl	80069e2 <USBD_CtlError>
          break;
 8005f26:	bf00      	nop
      }
      break;
 8005f28:	e004      	b.n	8005f34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fd58 	bl	80069e2 <USBD_CtlError>
      break;
 8005f32:	bf00      	nop
  }

  return ret;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop

08005f40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d005      	beq.n	8005f66 <USBD_StdItfReq+0x26>
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d852      	bhi.n	8006004 <USBD_StdItfReq+0xc4>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <USBD_StdItfReq+0x26>
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d14e      	bne.n	8006004 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d840      	bhi.n	8005ff6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	889b      	ldrh	r3, [r3, #4]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d836      	bhi.n	8005fec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	889b      	ldrh	r3, [r3, #4]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fed8 	bl	8005d3c <USBD_CoreFindIF>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d01d      	beq.n	8005fd2 <USBD_StdItfReq+0x92>
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11a      	bne.n	8005fd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f9c:	7bba      	ldrb	r2, [r7, #14]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	32ae      	adds	r2, #174	; 0xae
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00f      	beq.n	8005fcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005fac:	7bba      	ldrb	r2, [r7, #14]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fb4:	7bba      	ldrb	r2, [r7, #14]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32ae      	adds	r2, #174	; 0xae
 8005fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fca:	e004      	b.n	8005fd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fd0:	e001      	b.n	8005fd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	88db      	ldrh	r3, [r3, #6]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d110      	bne.n	8006000 <USBD_StdItfReq+0xc0>
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fdc7 	bl	8006b78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005fea:	e009      	b.n	8006000 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fcf7 	bl	80069e2 <USBD_CtlError>
          break;
 8005ff4:	e004      	b.n	8006000 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fcf2 	bl	80069e2 <USBD_CtlError>
          break;
 8005ffe:	e000      	b.n	8006002 <USBD_StdItfReq+0xc2>
          break;
 8006000:	bf00      	nop
      }
      break;
 8006002:	e004      	b.n	800600e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fceb 	bl	80069e2 <USBD_CtlError>
      break;
 800600c:	bf00      	nop
  }

  return ret;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	889b      	ldrh	r3, [r3, #4]
 800602a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d007      	beq.n	8006048 <USBD_StdEPReq+0x30>
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	f200 817f 	bhi.w	800633c <USBD_StdEPReq+0x324>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d02a      	beq.n	8006098 <USBD_StdEPReq+0x80>
 8006042:	2b20      	cmp	r3, #32
 8006044:	f040 817a 	bne.w	800633c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff fe82 	bl	8005d56 <USBD_CoreFindEP>
 8006052:	4603      	mov	r3, r0
 8006054:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006056:	7b7b      	ldrb	r3, [r7, #13]
 8006058:	2bff      	cmp	r3, #255	; 0xff
 800605a:	f000 8174 	beq.w	8006346 <USBD_StdEPReq+0x32e>
 800605e:	7b7b      	ldrb	r3, [r7, #13]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 8170 	bne.w	8006346 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006066:	7b7a      	ldrb	r2, [r7, #13]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800606e:	7b7a      	ldrb	r2, [r7, #13]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	32ae      	adds	r2, #174	; 0xae
 8006074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8163 	beq.w	8006346 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006080:	7b7a      	ldrb	r2, [r7, #13]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	32ae      	adds	r2, #174	; 0xae
 8006086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	4603      	mov	r3, r0
 8006094:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006096:	e156      	b.n	8006346 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d008      	beq.n	80060b2 <USBD_StdEPReq+0x9a>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	f300 8145 	bgt.w	8006330 <USBD_StdEPReq+0x318>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 809b 	beq.w	80061e2 <USBD_StdEPReq+0x1ca>
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d03c      	beq.n	800612a <USBD_StdEPReq+0x112>
 80060b0:	e13e      	b.n	8006330 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d002      	beq.n	80060c4 <USBD_StdEPReq+0xac>
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d016      	beq.n	80060f0 <USBD_StdEPReq+0xd8>
 80060c2:	e02c      	b.n	800611e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00d      	beq.n	80060e6 <USBD_StdEPReq+0xce>
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	2b80      	cmp	r3, #128	; 0x80
 80060ce:	d00a      	beq.n	80060e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 f953 	bl	8007380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f94f 	bl	8007380 <USBD_LL_StallEP>
 80060e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060e4:	e020      	b.n	8006128 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fc7a 	bl	80069e2 <USBD_CtlError>
              break;
 80060ee:	e01b      	b.n	8006128 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	885b      	ldrh	r3, [r3, #2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10e      	bne.n	8006116 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <USBD_StdEPReq+0xfe>
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	d008      	beq.n	8006116 <USBD_StdEPReq+0xfe>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	88db      	ldrh	r3, [r3, #6]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 f935 	bl	8007380 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fd2e 	bl	8006b78 <USBD_CtlSendStatus>

              break;
 800611c:	e004      	b.n	8006128 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fc5e 	bl	80069e2 <USBD_CtlError>
              break;
 8006126:	bf00      	nop
          }
          break;
 8006128:	e107      	b.n	800633a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d002      	beq.n	800613c <USBD_StdEPReq+0x124>
 8006136:	2b03      	cmp	r3, #3
 8006138:	d016      	beq.n	8006168 <USBD_StdEPReq+0x150>
 800613a:	e04b      	b.n	80061d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <USBD_StdEPReq+0x146>
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b80      	cmp	r3, #128	; 0x80
 8006146:	d00a      	beq.n	800615e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f917 	bl	8007380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 f913 	bl	8007380 <USBD_LL_StallEP>
 800615a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800615c:	e040      	b.n	80061e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc3e 	bl	80069e2 <USBD_CtlError>
              break;
 8006166:	e03b      	b.n	80061e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d136      	bne.n	80061de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f91d 	bl	80073be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fcf7 	bl	8006b78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fde1 	bl	8005d56 <USBD_CoreFindEP>
 8006194:	4603      	mov	r3, r0
 8006196:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006198:	7b7b      	ldrb	r3, [r7, #13]
 800619a:	2bff      	cmp	r3, #255	; 0xff
 800619c:	d01f      	beq.n	80061de <USBD_StdEPReq+0x1c6>
 800619e:	7b7b      	ldrb	r3, [r7, #13]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11c      	bne.n	80061de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80061a4:	7b7a      	ldrb	r2, [r7, #13]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80061ac:	7b7a      	ldrb	r2, [r7, #13]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32ae      	adds	r2, #174	; 0xae
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d010      	beq.n	80061de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061bc:	7b7a      	ldrb	r2, [r7, #13]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	32ae      	adds	r2, #174	; 0xae
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80061d2:	e004      	b.n	80061de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fc03 	bl	80069e2 <USBD_CtlError>
              break;
 80061dc:	e000      	b.n	80061e0 <USBD_StdEPReq+0x1c8>
              break;
 80061de:	bf00      	nop
          }
          break;
 80061e0:	e0ab      	b.n	800633a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d002      	beq.n	80061f4 <USBD_StdEPReq+0x1dc>
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d032      	beq.n	8006258 <USBD_StdEPReq+0x240>
 80061f2:	e097      	b.n	8006324 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <USBD_StdEPReq+0x1f2>
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b80      	cmp	r3, #128	; 0x80
 80061fe:	d004      	beq.n	800620a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fbed 	bl	80069e2 <USBD_CtlError>
                break;
 8006208:	e091      	b.n	800632e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800620a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	da0b      	bge.n	800622a <USBD_StdEPReq+0x212>
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	3310      	adds	r3, #16
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	3304      	adds	r3, #4
 8006228:	e00b      	b.n	8006242 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2202      	movs	r2, #2
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc37 	bl	8006ac4 <USBD_CtlSendData>
              break;
 8006256:	e06a      	b.n	800632e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	da11      	bge.n	8006284 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	f003 020f 	and.w	r2, r3, #15
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	3324      	adds	r3, #36	; 0x24
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d117      	bne.n	80062aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fbb0 	bl	80069e2 <USBD_CtlError>
                  break;
 8006282:	e054      	b.n	800632e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fb9d 	bl	80069e2 <USBD_CtlError>
                  break;
 80062a8:	e041      	b.n	800632e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da0b      	bge.n	80062ca <USBD_StdEPReq+0x2b2>
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	3310      	adds	r3, #16
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	3304      	adds	r3, #4
 80062c8:	e00b      	b.n	80062e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4413      	add	r3, r2
 80062e0:	3304      	adds	r3, #4
 80062e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <USBD_StdEPReq+0x2d8>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d103      	bne.n	80062f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e00e      	b.n	8006316 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f87d 	bl	80073fc <USBD_LL_IsStallEP>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e002      	b.n	8006316 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2202      	movs	r2, #2
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fbd1 	bl	8006ac4 <USBD_CtlSendData>
              break;
 8006322:	e004      	b.n	800632e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fb5b 	bl	80069e2 <USBD_CtlError>
              break;
 800632c:	bf00      	nop
          }
          break;
 800632e:	e004      	b.n	800633a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb55 	bl	80069e2 <USBD_CtlError>
          break;
 8006338:	bf00      	nop
      }
      break;
 800633a:	e005      	b.n	8006348 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb4f 	bl	80069e2 <USBD_CtlError>
      break;
 8006344:	e000      	b.n	8006348 <USBD_StdEPReq+0x330>
      break;
 8006346:	bf00      	nop
  }

  return ret;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	885b      	ldrh	r3, [r3, #2]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	2b06      	cmp	r3, #6
 8006376:	f200 8128 	bhi.w	80065ca <USBD_GetDescriptor+0x276>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBD_GetDescriptor+0x2c>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063f5 	.word	0x080063f5
 800638c:	080065cb 	.word	0x080065cb
 8006390:	080065cb 	.word	0x080065cb
 8006394:	0800656b 	.word	0x0800656b
 8006398:	08006597 	.word	0x08006597
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	7c12      	ldrb	r2, [r2, #16]
 80063a8:	f107 0108 	add.w	r1, r7, #8
 80063ac:	4610      	mov	r0, r2
 80063ae:	4798      	blx	r3
 80063b0:	60f8      	str	r0, [r7, #12]
      break;
 80063b2:	e112      	b.n	80065da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7c1b      	ldrb	r3, [r3, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	f107 0208 	add.w	r2, r7, #8
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3301      	adds	r3, #1
 80063d2:	2202      	movs	r2, #2
 80063d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063d6:	e100      	b.n	80065da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f107 0208 	add.w	r2, r7, #8
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
 80063e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	2202      	movs	r2, #2
 80063f0:	701a      	strb	r2, [r3, #0]
      break;
 80063f2:	e0f2      	b.n	80065da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	885b      	ldrh	r3, [r3, #2]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	f200 80ac 	bhi.w	8006558 <USBD_GetDescriptor+0x204>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <USBD_GetDescriptor+0xb4>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	08006421 	.word	0x08006421
 800640c:	08006455 	.word	0x08006455
 8006410:	08006489 	.word	0x08006489
 8006414:	080064bd 	.word	0x080064bd
 8006418:	080064f1 	.word	0x080064f1
 800641c:	08006525 	.word	0x08006525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	7c12      	ldrb	r2, [r2, #16]
 8006438:	f107 0108 	add.w	r1, r7, #8
 800643c:	4610      	mov	r0, r2
 800643e:	4798      	blx	r3
 8006440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006442:	e091      	b.n	8006568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 facb 	bl	80069e2 <USBD_CtlError>
            err++;
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	3301      	adds	r3, #1
 8006450:	72fb      	strb	r3, [r7, #11]
          break;
 8006452:	e089      	b.n	8006568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	7c12      	ldrb	r2, [r2, #16]
 800646c:	f107 0108 	add.w	r1, r7, #8
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
 8006474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006476:	e077      	b.n	8006568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fab1 	bl	80069e2 <USBD_CtlError>
            err++;
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	3301      	adds	r3, #1
 8006484:	72fb      	strb	r3, [r7, #11]
          break;
 8006486:	e06f      	b.n	8006568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	7c12      	ldrb	r2, [r2, #16]
 80064a0:	f107 0108 	add.w	r1, r7, #8
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
 80064a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064aa:	e05d      	b.n	8006568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa97 	bl	80069e2 <USBD_CtlError>
            err++;
 80064b4:	7afb      	ldrb	r3, [r7, #11]
 80064b6:	3301      	adds	r3, #1
 80064b8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ba:	e055      	b.n	8006568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7c12      	ldrb	r2, [r2, #16]
 80064d4:	f107 0108 	add.w	r1, r7, #8
 80064d8:	4610      	mov	r0, r2
 80064da:	4798      	blx	r3
 80064dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064de:	e043      	b.n	8006568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa7d 	bl	80069e2 <USBD_CtlError>
            err++;
 80064e8:	7afb      	ldrb	r3, [r7, #11]
 80064ea:	3301      	adds	r3, #1
 80064ec:	72fb      	strb	r3, [r7, #11]
          break;
 80064ee:	e03b      	b.n	8006568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	7c12      	ldrb	r2, [r2, #16]
 8006508:	f107 0108 	add.w	r1, r7, #8
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006512:	e029      	b.n	8006568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa63 	bl	80069e2 <USBD_CtlError>
            err++;
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	3301      	adds	r3, #1
 8006520:	72fb      	strb	r3, [r7, #11]
          break;
 8006522:	e021      	b.n	8006568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	7c12      	ldrb	r2, [r2, #16]
 800653c:	f107 0108 	add.w	r1, r7, #8
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006546:	e00f      	b.n	8006568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa49 	bl	80069e2 <USBD_CtlError>
            err++;
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	3301      	adds	r3, #1
 8006554:	72fb      	strb	r3, [r7, #11]
          break;
 8006556:	e007      	b.n	8006568 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa41 	bl	80069e2 <USBD_CtlError>
          err++;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	3301      	adds	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006566:	bf00      	nop
      }
      break;
 8006568:	e037      	b.n	80065da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7c1b      	ldrb	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f107 0208 	add.w	r2, r7, #8
 800657e:	4610      	mov	r0, r2
 8006580:	4798      	blx	r3
 8006582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006584:	e029      	b.n	80065da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa2a 	bl	80069e2 <USBD_CtlError>
        err++;
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	3301      	adds	r3, #1
 8006592:	72fb      	strb	r3, [r7, #11]
      break;
 8006594:	e021      	b.n	80065da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7c1b      	ldrb	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	f107 0208 	add.w	r2, r7, #8
 80065aa:	4610      	mov	r0, r2
 80065ac:	4798      	blx	r3
 80065ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3301      	adds	r3, #1
 80065b4:	2207      	movs	r2, #7
 80065b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065b8:	e00f      	b.n	80065da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa10 	bl	80069e2 <USBD_CtlError>
        err++;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	3301      	adds	r3, #1
 80065c6:	72fb      	strb	r3, [r7, #11]
      break;
 80065c8:	e007      	b.n	80065da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa08 	bl	80069e2 <USBD_CtlError>
      err++;
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	3301      	adds	r3, #1
 80065d6:	72fb      	strb	r3, [r7, #11]
      break;
 80065d8:	bf00      	nop
  }

  if (err != 0U)
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11e      	bne.n	800661e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	88db      	ldrh	r3, [r3, #6]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d016      	beq.n	8006616 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065e8:	893b      	ldrh	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88da      	ldrh	r2, [r3, #6]
 80065f2:	893b      	ldrh	r3, [r7, #8]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bf28      	it	cs
 80065f8:	4613      	movcs	r3, r2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065fe:	893b      	ldrh	r3, [r7, #8]
 8006600:	461a      	mov	r2, r3
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa5d 	bl	8006ac4 <USBD_CtlSendData>
 800660a:	e009      	b.n	8006620 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9e7 	bl	80069e2 <USBD_CtlError>
 8006614:	e004      	b.n	8006620 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 faae 	bl	8006b78 <USBD_CtlSendStatus>
 800661c:	e000      	b.n	8006620 <USBD_GetDescriptor+0x2cc>
    return;
 800661e:	bf00      	nop
  }
}
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop

08006628 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	889b      	ldrh	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d131      	bne.n	800669e <USBD_SetAddress+0x76>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	88db      	ldrh	r3, [r3, #6]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d12d      	bne.n	800669e <USBD_SetAddress+0x76>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	885b      	ldrh	r3, [r3, #2]
 8006646:	2b7f      	cmp	r3, #127	; 0x7f
 8006648:	d829      	bhi.n	800669e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b03      	cmp	r3, #3
 8006660:	d104      	bne.n	800666c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f9bc 	bl	80069e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666a:	e01d      	b.n	80066a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7bfa      	ldrb	r2, [r7, #15]
 8006670:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 feeb 	bl	8007454 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa7a 	bl	8006b78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	e009      	b.n	80066a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669c:	e004      	b.n	80066a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f99e 	bl	80069e2 <USBD_CtlError>
  }
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	4b4e      	ldr	r3, [pc, #312]	; (8006800 <USBD_SetConfig+0x150>)
 80066c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066c8:	4b4d      	ldr	r3, [pc, #308]	; (8006800 <USBD_SetConfig+0x150>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d905      	bls.n	80066dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f985 	bl	80069e2 <USBD_CtlError>
    return USBD_FAIL;
 80066d8:	2303      	movs	r3, #3
 80066da:	e08c      	b.n	80067f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d002      	beq.n	80066ee <USBD_SetConfig+0x3e>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d029      	beq.n	8006740 <USBD_SetConfig+0x90>
 80066ec:	e075      	b.n	80067da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066ee:	4b44      	ldr	r3, [pc, #272]	; (8006800 <USBD_SetConfig+0x150>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d020      	beq.n	8006738 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066f6:	4b42      	ldr	r3, [pc, #264]	; (8006800 <USBD_SetConfig+0x150>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <USBD_SetConfig+0x150>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fe ffe6 	bl	80056d8 <USBD_SetClassConfig>
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f962 	bl	80069e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006726:	e065      	b.n	80067f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa25 	bl	8006b78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2203      	movs	r2, #3
 8006732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006736:	e05d      	b.n	80067f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa1d 	bl	8006b78 <USBD_CtlSendStatus>
      break;
 800673e:	e059      	b.n	80067f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006740:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <USBD_SetConfig+0x150>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <USBD_SetConfig+0x150>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800675a:	4b29      	ldr	r3, [pc, #164]	; (8006800 <USBD_SetConfig+0x150>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fe ffd5 	bl	8005710 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa06 	bl	8006b78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800676c:	e042      	b.n	80067f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800676e:	4b24      	ldr	r3, [pc, #144]	; (8006800 <USBD_SetConfig+0x150>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d02a      	beq.n	80067d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fe ffc3 	bl	8005710 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <USBD_SetConfig+0x150>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <USBD_SetConfig+0x150>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fe ff9c 	bl	80056d8 <USBD_SetClassConfig>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00f      	beq.n	80067ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f918 	bl	80069e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fe ffa8 	bl	8005710 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067c8:	e014      	b.n	80067f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9d4 	bl	8006b78 <USBD_CtlSendStatus>
      break;
 80067d0:	e010      	b.n	80067f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9d0 	bl	8006b78 <USBD_CtlSendStatus>
      break;
 80067d8:	e00c      	b.n	80067f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f900 	bl	80069e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067e2:	4b07      	ldr	r3, [pc, #28]	; (8006800 <USBD_SetConfig+0x150>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fe ff91 	bl	8005710 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067ee:	2303      	movs	r3, #3
 80067f0:	73fb      	strb	r3, [r7, #15]
      break;
 80067f2:	bf00      	nop
  }

  return ret;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200001a8 	.word	0x200001a8

08006804 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	88db      	ldrh	r3, [r3, #6]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d004      	beq.n	8006820 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f8e2 	bl	80069e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800681e:	e023      	b.n	8006868 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	dc02      	bgt.n	8006832 <USBD_GetConfig+0x2e>
 800682c:	2b00      	cmp	r3, #0
 800682e:	dc03      	bgt.n	8006838 <USBD_GetConfig+0x34>
 8006830:	e015      	b.n	800685e <USBD_GetConfig+0x5a>
 8006832:	2b03      	cmp	r3, #3
 8006834:	d00b      	beq.n	800684e <USBD_GetConfig+0x4a>
 8006836:	e012      	b.n	800685e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3308      	adds	r3, #8
 8006842:	2201      	movs	r2, #1
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f93c 	bl	8006ac4 <USBD_CtlSendData>
        break;
 800684c:	e00c      	b.n	8006868 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3304      	adds	r3, #4
 8006852:	2201      	movs	r2, #1
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f934 	bl	8006ac4 <USBD_CtlSendData>
        break;
 800685c:	e004      	b.n	8006868 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f8be 	bl	80069e2 <USBD_CtlError>
        break;
 8006866:	bf00      	nop
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	b2db      	uxtb	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	2b02      	cmp	r3, #2
 8006886:	d81e      	bhi.n	80068c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d004      	beq.n	800689a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f8a5 	bl	80069e2 <USBD_CtlError>
        break;
 8006898:	e01a      	b.n	80068d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	330c      	adds	r3, #12
 80068ba:	2202      	movs	r2, #2
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f900 	bl	8006ac4 <USBD_CtlSendData>
      break;
 80068c4:	e004      	b.n	80068d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f88a 	bl	80069e2 <USBD_CtlError>
      break;
 80068ce:	bf00      	nop
  }
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	885b      	ldrh	r3, [r3, #2]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d107      	bne.n	80068fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f940 	bl	8006b78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068f8:	e013      	b.n	8006922 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d10b      	bne.n	800691a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	889b      	ldrh	r3, [r3, #4]
 8006906:	0a1b      	lsrs	r3, r3, #8
 8006908:	b29b      	uxth	r3, r3
 800690a:	b2da      	uxtb	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f930 	bl	8006b78 <USBD_CtlSendStatus>
}
 8006918:	e003      	b.n	8006922 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f860 	bl	80069e2 <USBD_CtlError>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693a:	b2db      	uxtb	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	2b02      	cmp	r3, #2
 8006940:	d80b      	bhi.n	800695a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	885b      	ldrh	r3, [r3, #2]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10c      	bne.n	8006964 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f910 	bl	8006b78 <USBD_CtlSendStatus>
      }
      break;
 8006958:	e004      	b.n	8006964 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f840 	bl	80069e2 <USBD_CtlError>
      break;
 8006962:	e000      	b.n	8006966 <USBD_ClrFeature+0x3c>
      break;
 8006964:	bf00      	nop
  }
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fa40 	bl	8005e1e <SWAPBYTE>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff fa33 	bl	8005e1e <SWAPBYTE>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fa26 	bl	8005e1e <SWAPBYTE>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	80da      	strh	r2, [r3, #6]
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fcc6 	bl	8007380 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069f4:	2100      	movs	r1, #0
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fcc2 	bl	8007380 <USBD_LL_StallEP>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d036      	beq.n	8006a88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f000 f836 	bl	8006a90 <USBD_GetLen>
 8006a24:	4603      	mov	r3, r0
 8006a26:	3301      	adds	r3, #1
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	4413      	add	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	3301      	adds	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	3301      	adds	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a54:	e013      	b.n	8006a7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3301      	adds	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
    idx++;
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	4413      	add	r3, r2
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e7      	bne.n	8006a56 <USBD_GetString+0x52>
 8006a86:	e000      	b.n	8006a8a <USBD_GetString+0x86>
    return;
 8006a88:	bf00      	nop
  }
}
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006aa0:	e005      	b.n	8006aae <USBD_GetLen+0x1e>
  {
    len++;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f5      	bne.n	8006aa2 <USBD_GetLen+0x12>
  }

  return len;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fcd1 	bl	8007492 <USBD_LL_Transmit>

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fcc0 	bl	8007492 <USBD_LL_Transmit>

  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fcc4 	bl	80074d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	2100      	movs	r1, #0
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fcb3 	bl	80074d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2204      	movs	r2, #4
 8006b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fc7f 	bl	8007492 <USBD_LL_Transmit>

  return USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fc8d 	bl	80074d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4912      	ldr	r1, [pc, #72]	; (8006c14 <MX_USB_DEVICE_Init+0x50>)
 8006bcc:	4812      	ldr	r0, [pc, #72]	; (8006c18 <MX_USB_DEVICE_Init+0x54>)
 8006bce:	f7fe fd06 	bl	80055de <USBD_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006bd8:	f7f9 fdc8 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bdc:	490f      	ldr	r1, [pc, #60]	; (8006c1c <MX_USB_DEVICE_Init+0x58>)
 8006bde:	480e      	ldr	r0, [pc, #56]	; (8006c18 <MX_USB_DEVICE_Init+0x54>)
 8006be0:	f7fe fd2d 	bl	800563e <USBD_RegisterClass>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bea:	f7f9 fdbf 	bl	800076c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bee:	490c      	ldr	r1, [pc, #48]	; (8006c20 <MX_USB_DEVICE_Init+0x5c>)
 8006bf0:	4809      	ldr	r0, [pc, #36]	; (8006c18 <MX_USB_DEVICE_Init+0x54>)
 8006bf2:	f7fe fc9b 	bl	800552c <USBD_CDC_RegisterInterface>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006bfc:	f7f9 fdb6 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c00:	4805      	ldr	r0, [pc, #20]	; (8006c18 <MX_USB_DEVICE_Init+0x54>)
 8006c02:	f7fe fd52 	bl	80056aa <USBD_Start>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c0c:	f7f9 fdae 	bl	800076c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c10:	bf00      	nop
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200000ac 	.word	0x200000ac
 8006c18:	200001ac 	.word	0x200001ac
 8006c1c:	20000018 	.word	0x20000018
 8006c20:	20000098 	.word	0x20000098

08006c24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4905      	ldr	r1, [pc, #20]	; (8006c40 <CDC_Init_FS+0x1c>)
 8006c2c:	4805      	ldr	r0, [pc, #20]	; (8006c44 <CDC_Init_FS+0x20>)
 8006c2e:	f7fe fc97 	bl	8005560 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c32:	4905      	ldr	r1, [pc, #20]	; (8006c48 <CDC_Init_FS+0x24>)
 8006c34:	4803      	ldr	r0, [pc, #12]	; (8006c44 <CDC_Init_FS+0x20>)
 8006c36:	f7fe fcb5 	bl	80055a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000c88 	.word	0x20000c88
 8006c44:	200001ac 	.word	0x200001ac
 8006c48:	20000488 	.word	0x20000488

08006c4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	2b23      	cmp	r3, #35	; 0x23
 8006c70:	d84a      	bhi.n	8006d08 <CDC_Control_FS+0xac>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <CDC_Control_FS+0x1c>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006d09 	.word	0x08006d09
 8006c7c:	08006d09 	.word	0x08006d09
 8006c80:	08006d09 	.word	0x08006d09
 8006c84:	08006d09 	.word	0x08006d09
 8006c88:	08006d09 	.word	0x08006d09
 8006c8c:	08006d09 	.word	0x08006d09
 8006c90:	08006d09 	.word	0x08006d09
 8006c94:	08006d09 	.word	0x08006d09
 8006c98:	08006d09 	.word	0x08006d09
 8006c9c:	08006d09 	.word	0x08006d09
 8006ca0:	08006d09 	.word	0x08006d09
 8006ca4:	08006d09 	.word	0x08006d09
 8006ca8:	08006d09 	.word	0x08006d09
 8006cac:	08006d09 	.word	0x08006d09
 8006cb0:	08006d09 	.word	0x08006d09
 8006cb4:	08006d09 	.word	0x08006d09
 8006cb8:	08006d09 	.word	0x08006d09
 8006cbc:	08006d09 	.word	0x08006d09
 8006cc0:	08006d09 	.word	0x08006d09
 8006cc4:	08006d09 	.word	0x08006d09
 8006cc8:	08006d09 	.word	0x08006d09
 8006ccc:	08006d09 	.word	0x08006d09
 8006cd0:	08006d09 	.word	0x08006d09
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	08006d09 	.word	0x08006d09
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d09 	.word	0x08006d09
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006d09 	.word	0x08006d09
 8006cf4:	08006d09 	.word	0x08006d09
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d09 	.word	0x08006d09
 8006d00:	08006d09 	.word	0x08006d09
 8006d04:	08006d09 	.word	0x08006d09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d08:	bf00      	nop
  }

  return (USBD_OK);
 8006d0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  memset (buffer, '\0', 64); // clear the buffer
 8006d22:	2240      	movs	r2, #64	; 0x40
 8006d24:	2100      	movs	r1, #0
 8006d26:	480b      	ldr	r0, [pc, #44]	; (8006d54 <CDC_Receive_FS+0x3c>)
 8006d28:	f000 fc7e 	bl	8007628 <memset>
	  uint8_t len = (uint8_t) *Len;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len); // copy the data to the buffer
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4806      	ldr	r0, [pc, #24]	; (8006d54 <CDC_Receive_FS+0x3c>)
 8006d3a:	f000 fc67 	bl	800760c <memcpy>
	  memset(Buf, '\0', len); // clear the Buf also
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	461a      	mov	r2, r3
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fc6f 	bl	8007628 <memset>

  /* USER CODE END 6 */
}
 8006d4a:	bf00      	nop
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000160 	.word	0x20000160

08006d58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2212      	movs	r2, #18
 8006d8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d8e:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	200000c8 	.word	0x200000c8

08006da0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2204      	movs	r2, #4
 8006db0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006db2:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	200000dc 	.word	0x200000dc

08006dc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	6039      	str	r1, [r7, #0]
 8006dce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	4907      	ldr	r1, [pc, #28]	; (8006df8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006dda:	4808      	ldr	r0, [pc, #32]	; (8006dfc <USBD_FS_ProductStrDescriptor+0x38>)
 8006ddc:	f7ff fe12 	bl	8006a04 <USBD_GetString>
 8006de0:	e004      	b.n	8006dec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4904      	ldr	r1, [pc, #16]	; (8006df8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006de6:	4805      	ldr	r0, [pc, #20]	; (8006dfc <USBD_FS_ProductStrDescriptor+0x38>)
 8006de8:	f7ff fe0c 	bl	8006a04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20001488 	.word	0x20001488
 8006dfc:	08007650 	.word	0x08007650

08006e00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	4904      	ldr	r1, [pc, #16]	; (8006e20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e10:	4804      	ldr	r0, [pc, #16]	; (8006e24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e12:	f7ff fdf7 	bl	8006a04 <USBD_GetString>
  return USBD_StrDesc;
 8006e16:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20001488 	.word	0x20001488
 8006e24:	08007668 	.word	0x08007668

08006e28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	221a      	movs	r2, #26
 8006e38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e3a:	f000 f843 	bl	8006ec4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e3e:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200000e0 	.word	0x200000e0

08006e4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4907      	ldr	r1, [pc, #28]	; (8006e80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e62:	4808      	ldr	r0, [pc, #32]	; (8006e84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e64:	f7ff fdce 	bl	8006a04 <USBD_GetString>
 8006e68:	e004      	b.n	8006e74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	4904      	ldr	r1, [pc, #16]	; (8006e80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e6e:	4805      	ldr	r0, [pc, #20]	; (8006e84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e70:	f7ff fdc8 	bl	8006a04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e74:	4b02      	ldr	r3, [pc, #8]	; (8006e80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20001488 	.word	0x20001488
 8006e84:	0800767c 	.word	0x0800767c

08006e88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4907      	ldr	r1, [pc, #28]	; (8006ebc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e9e:	4808      	ldr	r0, [pc, #32]	; (8006ec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ea0:	f7ff fdb0 	bl	8006a04 <USBD_GetString>
 8006ea4:	e004      	b.n	8006eb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4904      	ldr	r1, [pc, #16]	; (8006ebc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eaa:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eac:	f7ff fdaa 	bl	8006a04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb0:	4b02      	ldr	r3, [pc, #8]	; (8006ebc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001488 	.word	0x20001488
 8006ec0:	08007688 	.word	0x08007688

08006ec4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006eca:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <Get_SerialNum+0x44>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	; (8006f0c <Get_SerialNum+0x48>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <Get_SerialNum+0x4c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006eea:	2208      	movs	r2, #8
 8006eec:	4909      	ldr	r1, [pc, #36]	; (8006f14 <Get_SerialNum+0x50>)
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f814 	bl	8006f1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	4908      	ldr	r1, [pc, #32]	; (8006f18 <Get_SerialNum+0x54>)
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	f000 f80f 	bl	8006f1c <IntToUnicode>
  }
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	1fff7a10 	.word	0x1fff7a10
 8006f0c:	1fff7a14 	.word	0x1fff7a14
 8006f10:	1fff7a18 	.word	0x1fff7a18
 8006f14:	200000e2 	.word	0x200000e2
 8006f18:	200000f2 	.word	0x200000f2

08006f1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
 8006f32:	e027      	b.n	8006f84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	0f1b      	lsrs	r3, r3, #28
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d80b      	bhi.n	8006f54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0f1b      	lsrs	r3, r3, #28
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4619      	mov	r1, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3230      	adds	r2, #48	; 0x30
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e00a      	b.n	8006f6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	0f1b      	lsrs	r3, r3, #28
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4619      	mov	r1, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	440b      	add	r3, r1
 8006f64:	3237      	adds	r2, #55	; 0x37
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	3301      	adds	r3, #1
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	4413      	add	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	3301      	adds	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
 8006f84:	7dfa      	ldrb	r2, [r7, #23]
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3d3      	bcc.n	8006f34 <IntToUnicode+0x18>
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa4:	f107 0314 	add.w	r3, r7, #20
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fbc:	d13a      	bne.n	8007034 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	; (800703c <HAL_PCD_MspInit+0xa0>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_PCD_MspInit+0xa0>)
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fce:	4b1b      	ldr	r3, [pc, #108]	; (800703c <HAL_PCD_MspInit+0xa0>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fec:	230a      	movs	r3, #10
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff0:	f107 0314 	add.w	r3, r7, #20
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4812      	ldr	r0, [pc, #72]	; (8007040 <HAL_PCD_MspInit+0xa4>)
 8006ff8:	f7fa f976 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <HAL_PCD_MspInit+0xa0>)
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007000:	4a0e      	ldr	r2, [pc, #56]	; (800703c <HAL_PCD_MspInit+0xa0>)
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	6353      	str	r3, [r2, #52]	; 0x34
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_PCD_MspInit+0xa0>)
 800700e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007010:	4a0a      	ldr	r2, [pc, #40]	; (800703c <HAL_PCD_MspInit+0xa0>)
 8007012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007016:	6453      	str	r3, [r2, #68]	; 0x44
 8007018:	4b08      	ldr	r3, [pc, #32]	; (800703c <HAL_PCD_MspInit+0xa0>)
 800701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	2043      	movs	r0, #67	; 0x43
 800702a:	f7fa f926 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800702e:	2043      	movs	r0, #67	; 0x43
 8007030:	f7fa f93f 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007034:	bf00      	nop
 8007036:	3728      	adds	r7, #40	; 0x28
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40023800 	.word	0x40023800
 8007040:	40020000 	.word	0x40020000

08007044 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f7fe fb72 	bl	8005744 <USBD_LL_SetupStage>
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	4619      	mov	r1, r3
 8007092:	f7fe fbac 	bl	80057ee <USBD_LL_DataOutStage>
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	334c      	adds	r3, #76	; 0x4c
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f7fe fc45 	bl	8005954 <USBD_LL_DataInStage>
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fd79 	bl	8005bd8 <USBD_LL_SOF>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070f6:	2301      	movs	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
 8007106:	e008      	b.n	800711a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d102      	bne.n	8007116 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e001      	b.n	800711a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007116:	f7f9 fb29 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fd19 	bl	8005b5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fcc1 	bl	8005ab8 <USBD_LL_Reset>
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fd14 	bl	8005b7c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007166:	f043 0301 	orr.w	r3, r3, #1
 800716a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007174:	4b04      	ldr	r3, [pc, #16]	; (8007188 <HAL_PCD_SuspendCallback+0x48>)
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	4a03      	ldr	r2, [pc, #12]	; (8007188 <HAL_PCD_SuspendCallback+0x48>)
 800717a:	f043 0306 	orr.w	r3, r3, #6
 800717e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed00 	.word	0xe000ed00

0800718c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fd04 	bl	8005ba8 <USBD_LL_Resume>
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fd5c 	bl	8005c7c <USBD_LL_IsoOUTIncomplete>
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071de:	78fa      	ldrb	r2, [r7, #3]
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fd18 	bl	8005c18 <USBD_LL_IsoINIncomplete>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fd6e 	bl	8005ce0 <USBD_LL_DevConnected>
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fd6b 	bl	8005cf6 <USBD_LL_DevDisconnected>
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d13c      	bne.n	80072b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007238:	4a20      	ldr	r2, [pc, #128]	; (80072bc <USBD_LL_Init+0x94>)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <USBD_LL_Init+0x94>)
 8007244:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007248:	4b1c      	ldr	r3, [pc, #112]	; (80072bc <USBD_LL_Init+0x94>)
 800724a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800724e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <USBD_LL_Init+0x94>)
 8007252:	2204      	movs	r2, #4
 8007254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007256:	4b19      	ldr	r3, [pc, #100]	; (80072bc <USBD_LL_Init+0x94>)
 8007258:	2202      	movs	r2, #2
 800725a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <USBD_LL_Init+0x94>)
 800725e:	2200      	movs	r2, #0
 8007260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <USBD_LL_Init+0x94>)
 8007264:	2202      	movs	r2, #2
 8007266:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007268:	4b14      	ldr	r3, [pc, #80]	; (80072bc <USBD_LL_Init+0x94>)
 800726a:	2200      	movs	r2, #0
 800726c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800726e:	4b13      	ldr	r3, [pc, #76]	; (80072bc <USBD_LL_Init+0x94>)
 8007270:	2200      	movs	r2, #0
 8007272:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007274:	4b11      	ldr	r3, [pc, #68]	; (80072bc <USBD_LL_Init+0x94>)
 8007276:	2200      	movs	r2, #0
 8007278:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800727a:	4b10      	ldr	r3, [pc, #64]	; (80072bc <USBD_LL_Init+0x94>)
 800727c:	2200      	movs	r2, #0
 800727e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007280:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <USBD_LL_Init+0x94>)
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007286:	480d      	ldr	r0, [pc, #52]	; (80072bc <USBD_LL_Init+0x94>)
 8007288:	f7fa fa15 	bl	80016b6 <HAL_PCD_Init>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007292:	f7f9 fa6b 	bl	800076c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007296:	2180      	movs	r1, #128	; 0x80
 8007298:	4808      	ldr	r0, [pc, #32]	; (80072bc <USBD_LL_Init+0x94>)
 800729a:	f7fb fc6c 	bl	8002b76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800729e:	2240      	movs	r2, #64	; 0x40
 80072a0:	2100      	movs	r1, #0
 80072a2:	4806      	ldr	r0, [pc, #24]	; (80072bc <USBD_LL_Init+0x94>)
 80072a4:	f7fb fc20 	bl	8002ae8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072a8:	2280      	movs	r2, #128	; 0x80
 80072aa:	2101      	movs	r1, #1
 80072ac:	4803      	ldr	r0, [pc, #12]	; (80072bc <USBD_LL_Init+0x94>)
 80072ae:	f7fb fc1b 	bl	8002ae8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20001688 	.word	0x20001688

080072c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fa fb0a 	bl	80018f0 <HAL_PCD_Start>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f942 	bl	800756c <USBD_Get_USB_Status>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	4608      	mov	r0, r1
 8007300:	4611      	mov	r1, r2
 8007302:	461a      	mov	r2, r3
 8007304:	4603      	mov	r3, r0
 8007306:	70fb      	strb	r3, [r7, #3]
 8007308:	460b      	mov	r3, r1
 800730a:	70bb      	strb	r3, [r7, #2]
 800730c:	4613      	mov	r3, r2
 800730e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800731e:	78bb      	ldrb	r3, [r7, #2]
 8007320:	883a      	ldrh	r2, [r7, #0]
 8007322:	78f9      	ldrb	r1, [r7, #3]
 8007324:	f7fa ffdb 	bl	80022de <HAL_PCD_EP_Open>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f91c 	bl	800756c <USBD_Get_USB_Status>
 8007334:	4603      	mov	r3, r0
 8007336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007338:	7bbb      	ldrb	r3, [r7, #14]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f7fb f824 	bl	80023ae <HAL_PCD_EP_Close>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f8fd 	bl	800756c <USBD_Get_USB_Status>
 8007372:	4603      	mov	r3, r0
 8007374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007376:	7bbb      	ldrb	r3, [r7, #14]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800739a:	78fa      	ldrb	r2, [r7, #3]
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fb f8fc 	bl	800259c <HAL_PCD_EP_SetStall>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f8de 	bl	800756c <USBD_Get_USB_Status>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	4611      	mov	r1, r2
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fb f941 	bl	8002664 <HAL_PCD_EP_ClrStall>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 f8bf 	bl	800756c <USBD_Get_USB_Status>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800740e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007414:	2b00      	cmp	r3, #0
 8007416:	da0b      	bge.n	8007430 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	333e      	adds	r3, #62	; 0x3e
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	e00b      	b.n	8007448 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	4613      	mov	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007446:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f7fa ff0e 	bl	8002294 <HAL_PCD_SetAddress>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f874 	bl	800756c <USBD_Get_USB_Status>
 8007484:	4603      	mov	r3, r0
 8007486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007488:	7bbb      	ldrb	r3, [r7, #14]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
 800749e:	460b      	mov	r3, r1
 80074a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074b0:	7af9      	ldrb	r1, [r7, #11]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	f7fb f827 	bl	8002508 <HAL_PCD_EP_Transmit>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 f853 	bl	800756c <USBD_Get_USB_Status>
 80074c6:	4603      	mov	r3, r0
 80074c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	460b      	mov	r3, r1
 80074e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074f2:	7af9      	ldrb	r1, [r7, #11]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	f7fa ffa3 	bl	8002442 <HAL_PCD_EP_Receive>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f832 	bl	800756c <USBD_Get_USB_Status>
 8007508:	4603      	mov	r3, r0
 800750a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800750c:	7dbb      	ldrb	r3, [r7, #22]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	460b      	mov	r3, r1
 8007520:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f7fa ffd3 	bl	80024d8 <HAL_PCD_EP_GetRxCount>
 8007532:	4603      	mov	r3, r0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <USBD_static_malloc+0x18>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20001b94 	.word	0x20001b94

08007558 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]

}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2b03      	cmp	r3, #3
 800757e:	d817      	bhi.n	80075b0 <USBD_Get_USB_Status+0x44>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <USBD_Get_USB_Status+0x1c>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	08007599 	.word	0x08007599
 800758c:	0800759f 	.word	0x0800759f
 8007590:	080075a5 	.word	0x080075a5
 8007594:	080075ab 	.word	0x080075ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
    break;
 800759c:	e00b      	b.n	80075b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800759e:	2303      	movs	r3, #3
 80075a0:	73fb      	strb	r3, [r7, #15]
    break;
 80075a2:	e008      	b.n	80075b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
    break;
 80075a8:	e005      	b.n	80075b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075aa:	2303      	movs	r3, #3
 80075ac:	73fb      	strb	r3, [r7, #15]
    break;
 80075ae:	e002      	b.n	80075b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075b0:	2303      	movs	r3, #3
 80075b2:	73fb      	strb	r3, [r7, #15]
    break;
 80075b4:	bf00      	nop
  }
  return usb_status;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <__libc_init_array>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4d0d      	ldr	r5, [pc, #52]	; (80075fc <__libc_init_array+0x38>)
 80075c8:	4c0d      	ldr	r4, [pc, #52]	; (8007600 <__libc_init_array+0x3c>)
 80075ca:	1b64      	subs	r4, r4, r5
 80075cc:	10a4      	asrs	r4, r4, #2
 80075ce:	2600      	movs	r6, #0
 80075d0:	42a6      	cmp	r6, r4
 80075d2:	d109      	bne.n	80075e8 <__libc_init_array+0x24>
 80075d4:	4d0b      	ldr	r5, [pc, #44]	; (8007604 <__libc_init_array+0x40>)
 80075d6:	4c0c      	ldr	r4, [pc, #48]	; (8007608 <__libc_init_array+0x44>)
 80075d8:	f000 f82e 	bl	8007638 <_init>
 80075dc:	1b64      	subs	r4, r4, r5
 80075de:	10a4      	asrs	r4, r4, #2
 80075e0:	2600      	movs	r6, #0
 80075e2:	42a6      	cmp	r6, r4
 80075e4:	d105      	bne.n	80075f2 <__libc_init_array+0x2e>
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ec:	4798      	blx	r3
 80075ee:	3601      	adds	r6, #1
 80075f0:	e7ee      	b.n	80075d0 <__libc_init_array+0xc>
 80075f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f6:	4798      	blx	r3
 80075f8:	3601      	adds	r6, #1
 80075fa:	e7f2      	b.n	80075e2 <__libc_init_array+0x1e>
 80075fc:	080076b0 	.word	0x080076b0
 8007600:	080076b0 	.word	0x080076b0
 8007604:	080076b0 	.word	0x080076b0
 8007608:	080076b4 	.word	0x080076b4

0800760c <memcpy>:
 800760c:	440a      	add	r2, r1
 800760e:	4291      	cmp	r1, r2
 8007610:	f100 33ff 	add.w	r3, r0, #4294967295
 8007614:	d100      	bne.n	8007618 <memcpy+0xc>
 8007616:	4770      	bx	lr
 8007618:	b510      	push	{r4, lr}
 800761a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800761e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007622:	4291      	cmp	r1, r2
 8007624:	d1f9      	bne.n	800761a <memcpy+0xe>
 8007626:	bd10      	pop	{r4, pc}

08007628 <memset>:
 8007628:	4402      	add	r2, r0
 800762a:	4603      	mov	r3, r0
 800762c:	4293      	cmp	r3, r2
 800762e:	d100      	bne.n	8007632 <memset+0xa>
 8007630:	4770      	bx	lr
 8007632:	f803 1b01 	strb.w	r1, [r3], #1
 8007636:	e7f9      	b.n	800762c <memset+0x4>

08007638 <_init>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr

08007644 <_fini>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr
